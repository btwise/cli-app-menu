# Â©2016 Copyright 2016 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="February-10-2016 23:59"
#
# +----------------------------------------+
# |      Function f_menu_cat_network       |
# +----------------------------------------+
#
#  Inputs: $GUI.
#    Uses: None.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_cat_network () {
      case $GUI in
           dialog | whiptail)
           f_menu_cat_network_gui
           ;;
           text)
           f_menu_cat_network_txt
           ;;
      esac
} # End of function f_menu_cat_network
#
# +----------------------------------------+
# |     Function f_menu_cat_network_txt    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: BNE, MENU_ITEM, MAX
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_cat_network_txt () {
      f_initvars_menu_app "BNE"
      until [ "$BNE" = "0" ]
      do    # Start of Network Application Category until loop.
#f_menu_app_firewalls         #BNE Firewalls    - Configure firewalls.
#f_menu_app_lan               #BNE LAN          - Test local area network connectivity, display settings.
#f_menu_cat_network_monitors  #BNE Monitors     - LAN monitors, network mappers.
#f_menu_app_nic_tools         #BNE NIC Tools    - Configure wired/wireless cards, scan for wireless networks.
#f_menu_app_packet_tools      #BNE Packet Tools - Packet sniffers, packet analyzers.
#f_menu_app_network_sharing   #BNE Sharing      - Share files on NetWare & Microsoft Windows PCs/networks.
#f_menu_app_wan               #BNE WAN          - Test wide-area network connectivity, speed, routing, DNS.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Application Categories Menu"
            DELIMITER="#BNE" #BNE This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read BNE
            f_menu_item_process $BNE  # Outputs $MENU_ITEM. $BNE
      done  # End of Network Application Category until loop.
            #
      unset BNE MENU_ITEM  # Throw out this variable.
} # End of function f_menu_cat_network_txt
#
# +----------------------------------------+
# |    Function f_menu_cat_network_gui     |
# +----------------------------------------+
#
#  Inputs: GUI.
#    Uses: BIN, MENU_TITLE, THIS_FILE.
# Outputs: None.
#
f_menu_cat_network_gui () {
      f_initvars_menu_app "BNE"
      until [ "$BNE" = "0" ]
      do    # Start of Network Application Category until loop.
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Categories Menu"
            BNE=$($GUI --title "$MENU_TITLE" --menu "\n\nUse (up/down arrow keys) or (letters):" 20 80 11 \
            "Return"       "Return to previous menu." \
            "Firewalls"    "Configure firewalls." \
            "LAN"          "Test local area network connectivity, display settings." \
            "Monitors"     "LAN monitors, network mappers." \
            "NIC Tools"    "Configure wired/wireless cards, scan for wireless networks." \
            "Packet Tools" "Packet sniffers, packet analyzers." \
            "Sharing"      "Share files on NetWare & Microsoft Windows PCs/networks." \
            "WAN"          "Test wide-area network connectivity, speed, routing, DNS." \
            2>&1 >/dev/tty)
            #
            case $BNE in
                 "Return") BNE=0 ;;
                 "Firewalls") f_menu_app_firewalls ;;
                 "LAN") f_menu_app_lan ;;
                 "Monitors") f_menu_cat_network_monitors ;;
                 "NIC Tools") f_menu_app_nic_tools ;;
                 "Packet Tools") f_menu_app_packet_tools ;;
                 "Sharing") f_menu_app_network_sharing ;;
                 "WAN") f_menu_app_wan ;;
            esac
            #
      done  # End of Network Application Category until loop.
            #
      unset BNE THIS_FILE MENU_TITLE  # Throw out this variable.
} # End of function f_menu_cat_network_gui
#
# +----------------------------------------+
# |      Function f_menu_app_firewalls     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNF, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_firewalls () {
      f_initvars_menu_app "MNF"
      until [ "$MNF" = "0" ]
      do    # Start of Firewall Applications until loop.
#1^0^0^0^1 #MNF arptables - Firewall configuration rules for an ARP chain.
#0^0^0^0^1 #MNF doscan    - Lists PCs listening for a TCP connection.
#1^0^0^0^1 #MNF iptables  - Firewall configuration rules for an IP chain.
#0^0^0^1^0 #MNF iptstate  - Monitor traffic in IP Tables state table; ncurses-based display.
#0^0^0^0^1 #MNF knockd    - Port-knocking server.
#0^0^0^0^0 #MNF knocker   - TCP security port scanner written in C, using threads.
#0^0^0^0^1 #MNF labrea    - Sticky honeypot entraps intruder tying up his CPU.
#0^0^0^0^0 #MNF mason     - Firewall that exactly matches the types of TCP/IP traffic.
#1^0^0^0^0 #MNF portbunny - Port scanner created by Recurity Labs.
#0^0^0^0^0 #MNF strobe    - Port scanner.
#1^0^0^0^1 #MNF ufw       - Firewall configuration and status.
#1^0^0^0^1 #MNF vuurmuur  - Firewall manager, monitoring, logging, ssh, ncurses GUI.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Firewall Applications Menu"
            DELIMITER="#MNF" #MNF This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNF
            f_menu_item_process $MNF  # Outputs $MENU_ITEM.
      done  # End of Firewall Applications until loop.
            #
      unset MNF MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_firewalls
#
# +----------------------------------------+
# |         Function f_menu_app_lan        |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNL, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_lan () {
      f_initvars_menu_app "MNL"
      until [ "$MNL" = "0" ]
      do    # Start of LAN Applications until loop.
#1^0^0^0^1    #MNL arping      - Check LAN connectivity by pinging MAC, IP address/hostname.
#0^0^0^0^1    #MNL ekgping     - Ping with audio "ekg" sounds.
#0^0^0^0^1    #MNL hostname    - Show or set the system's host name.
#1^0^0^0^1    #MNL ip          - Shows routing, devices, policy routing and tunnels.
#f_ip^0^0^0^1 #MNL ip addr     - Protocol (IP or IPv6) address on a device.
#f_ip^0^0^0^1 #MNL ip link     - Shows network device.
#f_ip^0^0^0^1 #MNL ip neighbor - ARP or NDISC cache entry.
#0^0^0^0^1    #MNL ipcalc      - Calculator for IPv4 address ranges.
#1^0^0^0^1    #MNL ping        - Check LAN/WAN connectivity by pinging IP address or hostname.
#0^0^0^0^1    #MNL pipcalc     - IP calculator intended to work like Red Hat's IP calculator.
#0^0^0^0^1    #MNL sipcalc     - Advanced IPv4, IPv6 subnet calculator.
#1^0^0^0^1    #MNL ss          - Show sockets, PACKET, TCP, UDP, DCCP, RAW, state filtering.
#0^0^0^0^1    #MNL subnetcalc  - IPv4/IPv6 subnet calculator, address, broadcast, hosts info.
#0^0^0^0^1    #MNL wuzzah      - LAN user login/out tracker.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="LAN Applications Menu"
            DELIMITER="#MNL" #MNL This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNL
            f_menu_item_process $MNL  # Outputs $MENU_ITEM.
      done  # End of LAN Applications until loop.
            #
      unset MNL MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_lan
#
# +----------------------------------------+
# |         Function f_menu_app_wan        |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNW, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_wan () {
      f_initvars_menu_app "MNW"
      until [ "$MNW" = "0" ]
      do    # Start of WAN Applications until loop.
#0^0^0^0^1     #MNW bing          - Measure LAN/WAN connection speed.
#0^0^0^0^1     #MNW dig           - Query Internet domain name servers.
#0^0^0^0^1     #MNW dnsdomainname - Show the system's DNS domain name.
#0^0^0^0^1     #MNW dnstop        - Analyze and display tables of DNS traffic.
#0^0^0^0^1     #MNW dnstracer     - Trace URL back to referencing DNS servers.
#0^0^0^0^1     #MNW domainname    - Show or set the system's NIS/YP domain name.
#1^0^0^0^1     #MNW geoip         - Show country of origin for any IP address. (RHEL pkg).
#0^0^0^0^1     #MNW geoiplookup   - Show country of origin for any IP address. (Debian pkg).
#1^0^0^0^1     #MNW ip            - Shows routing, devices, policy routing and tunnels.
#f_ip^0^0^0^1  #MNW ip route      - Shows routing.
#0^0^0^0^1     #MNW lft           - Traceroute tool, sends TCP SYN, FIN, listens for TCP, ICMP.
#1^0^0^0^1     #MNW mtr           - Traceroute tool, has features of ping and traceroute.
#0^0^0^0^1     #MNW namebench     - Find the fastest DNS servers.
#0^0^0^0^1     #MNW nisdomainname - Show or set the system's NIS/YP domain name.
#1^0^0^20:NC^1 #MNW nslookup      - Query Internet domain name servers.
#f_menu_app_wan2^0^0^0^1 #MNW MORE...       - For more WAN applications.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="WAN Applications Menu"
            DELIMITER="#MNW" #MNW This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNW
            f_menu_item_process $MNW  # Outputs $MENU_ITEM.
      done  # End of WAN Applications until loop.
            #
      unset MNW MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_wan
#
# +----------------------------------------+
# |         Function f_menu_app_wan2       |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNX, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_wan2 () {
      f_initvars_menu_app "MNX"
      until [ "$MNX" = "0" ]
      do    # Start of WAN Applications2 until loop.
#1^0^0^0^1     #MNX ping          - Check LAN/WAN connectivity by pinging IP address, hostname.
#0^0^0^0^1     #MNX route         - Shows routing table.
#1^0^0^0:NC^0  #MNX speedometer   - Measure LAN/WAN connection speed.
#0^1^0^0^1     #MNX speedtest-cli - Test the speed of LAN/WAN connection using Speedtest.net.
#1^0^0^0^1     #MNX ss            - Show sockets, PACKET, TCP, UDP, DCCP, RAW, state filtering.
#1^0^0^0^1     #MNX traceroute    - Trace network path to destination. 
#1^0^0^0^1     #MNX tracepath     - Trace network path to destination, show MTU.
#1^0^0^0^1     #MNX traceproto    - Trace network path to destination. 
#0^0^0^0^1     #MSI ypdomainname  - Show or set the system's NIS/YP domain name.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="WAN Applications2 Menu"
            DELIMITER="#MNX" #MNX This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNX
            f_menu_item_process $MNX  # Outputs $MENU_ITEM.
      done  # End of WAN Applications2 until loop.
            #
      unset MNX MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_wan2
#
# +----------------------------------------+
# |  Function f_menu_cat_network_monitors  |
# +----------------------------------------+
#
#  Inputs: $GUI.
#    Uses: None.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_cat_network_monitors () {
      case $GUI in
           dialog | whiptail)
           f_menu_cat_network_monitors_gui
           ;;
           text)
           f_menu_cat_network_monitors_txt
           ;;
      esac
} # End of function f_menu_cat_network_monitors
#
# +----------------------------------------+
# |Function f_menu_cat_network_monitors_txt|
# +----------------------------------------+
#
#  Inputs: None
#    Uses: BNM, MENU_ITEM, MAX
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_cat_network_monitors_txt () {
      f_initvars_menu_app "BNM"
      until [ "$BNM" = "0" ]
      do    # Start of Network Monitor Application Category until loop.
#f_menu_app_network_bandwidth #BNM Bandwidth - Bandwidth monitors.
#f_menu_app_network_structure  #BNM Structure - Management, status, connections, devices, hosts.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Monitor Application Categories Menu"
            DELIMITER="#BNM" #BNM This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read BNM
            f_menu_item_process $BNM  # Outputs $MENU_ITEM. $BNM
      done  # End of Network Monitors Application Category until loop.
            #
      unset BNM MENU_ITEM  # Throw out this variable.
} # End of function f_menu_cat_network_monitors_txt
#
# +----------------------------------------+
# |Function f_menu_cat_network_monitors_gui|
# +----------------------------------------+
#
#  Inputs: GUI.
#    Uses: BNM, MENU_TITLE, THIS_FILE.
# Outputs: None.
#
f_menu_cat_network_monitors_gui () {
      f_initvars_menu_app "BNM"
      until [ "$BNM" = "0" ]
      do    # Start of Network Monitor Application Category until loop.
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Monitor Application Categories Menu"
            BNM=$($GUI --title "$MENU_TITLE" --menu "\n\nUse (up/down arrow keys) or (letters):" 20 80 11 \
            "Return"    "Return to previous menu." \
            "Bandwidth" "Bandwidth monitors." \
            "Structure" "Management, status, connections, devices, hosts." \
            2>&1 >/dev/tty)
            #
            case $BNM in
                 "Return") BNM=0 ;;
                 "Bandwidth") f_menu_app_network_bandwidth ;;
                 "Structure") f_menu_app_network_structure ;;
            esac
            #
      done  # End of Network Monitor Application Category until loop.
            #
      unset BNM THIS_FILE MENU_TITLE  # Throw out this variable.
} # End of function f_menu_cat_network_monitors_gui
#
# +----------------------------------------+
# |Function f_menu_app_network_bandwidth   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNB, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_network_bandwidth () {
      f_initvars_menu_app "MNB"
      until [ "$MNB" = "0" ]
      do    # Start of Network Bandwidth Applications until loop.
#0^0^0^0^0    #MNB bmon      - Bandwidth monitor and rate estimator.
#0^0^0^0^0    #MNB bwm-ng    - Bandwidth graphical monitor.
#0^0^0^0^0    #MNB cbm       - Color Bandwidth Meter; ncurses-based display.
#1^0^0^0^1    #MNB ifstat    - Bandwidth statistics. (See also dstat, System Monitors Menu).
#1^0^0^1:NC^0 #MNB iftop     - Bandwidth statistics.
#0^0^0^0^0    #MNB ibmonitor - Bandwidth monitor, totals, max, avg in Kbps and KBps.
#0^0^0^0^0    #MNB iperf     - Bandwidth monitor, UDP/TCP packets, CPU usage, JSON output.
#1^0^0^1:NC^0 #MNB jnettop   - Bandwidth statistics across streams.
#0^0^0^1^0    #MNB nethogs   - Bandwidth statistics by process.
#0^0^0^1^0    #MNB nload     - Bandwidth graphical monitor in real-time; ncurses-based.
#0^0^0^1:NC^0 #MNB pktstat   - Display active connections and bandwidth in real-time.
#0^0^0^0^1    #MNB statnet   - Bandwidth statistics.
#0^0^0^1^0    #MNB trafshow  - Bandwidth statistics; ncurses-based.
#0^0^0^1^0    #MNB wavemon   - Wireless bandwidth, signal strength histogram.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Bandwidth Monitor Applications Menu"
            DELIMITER="#MNB" #MNB This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu "$MENU_TITLE" "$DELIMITER"
            #
            read MNB
            f_menu_item_process $MNB  # Outputs $MENU_ITEM.
      done  # End of Network Bandwidth Applications until loop.
            #
      unset MNB MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_network_bandwidth
#
# +----------------------------------------+
# |  Function f_menu_app_network_structure |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNM, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_network_structure () {
      f_initvars_menu_app "MNM"
      until [ "$MNM" = "0" ]
      do    # Start of Network Structure Applications until loop.
#0^0^0^0^1    #MNM httpry    - Light-weight network traffic logging tool.
#0^0^0^0^0    #MNM iptraf    - IP LAN monitor, ncurses-based display.
#0^0^0^0^0    #MNM iptraf-ng - Fork of iptraf.
#1^0^0^0^1    #MNM nagios3   - IP LAN monitor. Display network hosts, devices, connections.
#0^0^0^0^0    #MNM nc        - Netcat reads/writes data across network.
#1^0^0^1:NC^0 #MNM netstat   - Print network connections, routing tables, interface stats, etc.
#1^0^0^1^1    #MNM netwatch  - Protocol monitor; ncurses-based.
#1^0^0^0^0    #MNM ntop      - Display network usage and status information in a web browser.
#1^0^0^0^0    #MNM opennms   - Network management application. Discovery, reports, statistics.
#0^0^0^0^1    #MNM pmacct    - Traffic information monitor.
#1^0^0^1:NC^0 #MNM slurm     - Simple Linux Utility for Resource Management. I/O load monitor.
#1^0^0^1:NC^0 #MNM sntop     - IP LAN monitor. Display network hosts and connections.
#0^0^0^0^1    #MNM vnstat    - Traffic information monitor.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Structure Monitor Applications Menu"
            DELIMITER="#MNM" #MNM This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNM
            f_menu_item_process $MNM  # Outputs $MENU_ITEM.
      done  # End of Network Structure Applications until loop.
            #
      unset MNM MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_network_structure
#
# +----------------------------------------+
# |   Function f_menu_app_network_sharing  |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNS, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY.
#
f_menu_app_network_sharing () {
      f_initvars_menu_app "MNS"
      until [ "$MNS" = "0" ]
      do    # Start of Network Configuration Applications until loop.
#0^0^0^0^1 #MNS ncpfs     - NetWare file/printer server utilities; nprint, pserver.
#1^0^0^0^1 #MNS smbc      - Samba file manager for folder shares with Microsoft Windows.
#0^0^0^0^1 #MNS smbclient - Samba client (share folders with Microsoft Windows).
#0^0^0^0^1 #MNS smbget    - Download files with a wget-like utility over SMB.
#0^0^0^0^1 #MNS smbnetfs  - Browse all Samba shares easily in one place (mount-point).
#0^0^0^0^1 #MNS smbstatus - Samba files lock status.
#0^0^0^0^1 #MNS testparm  - Samba configuration display.
#0^0^0^0^1 #MNS woof      - Woof (Web Offer One File) copies files via the HTTP protocol.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Network Sharing Applications Menu"
            DELIMITER="#MNS" #MNS This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNS
            f_menu_item_process $MNS  # Outputs $MENU_ITEM.
      done  # End of Network Sharing Applications until loop.
            #
      unset MNS MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_network_sharing
#
# +----------------------------------------+
# |      Function f_menu_app_nic_tools     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNN, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_nic_tools () {
      f_initvars_menu_app "MNN"
      until [ "$MNN" = "0" ]
      do    # Start of NIC Tools Applications until loop.
#0^0^0^0^0    #MNN ethstatus    - NIC packet statistics, xmit, rcvd, totals, speed, w/graph.
#1^0^0^0^1    #MNN ethtool      - NIC configuration.
#0^0^0^0^1    #MNN ifconfig     - NIC configuration.
#0^0^0^0^1    #MNN ifplugstatus - Wireless USB NIC status.
#1^0^0^0^1    #MNN ip           - Shows routing, devices, policy routing and tunnels.
#f_ip^0^0^0^1 #MNN ip addr      - Protocol (IP or IPv6) address on a device.
#f_ip^0^0^0^1 #MNN ip neighbor  - ARP or NDISC cache entry.
#0^0^0^0^1    #MNN ipsc         - NIC configuration.
#0^0^0^0^1    #MNN iwconfig     - Wireless NIC configuration.
#1^0^0^0^1    #MNN iwlist       - Get detailed information from wired/wireless NICs.
#1^0^0^0^1    #MNN macchanger   - Change the hardware MAC address on wired/wireless NICs.
#0^0^0^0^1    #MNN mii-tool     - NIC configuration of Media Independent Interface Unit.
#0^0^0^0^1    #MNN mii-diag     - NIC configuration of network cards.
#1^0^0^0^0    #MNN netload      - NIC network load; ncurses-based.
#0^0^0^0^1    #MNN nictools-pci - NIC configuration of specific oem network cards.
#f_menu_app_nic_tools2^0^0^0^1    #MNN MORE...      - More NIC Tools Applications.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="NIC Tools Applications Menu"
            DELIMITER="#MNN" #MNN This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNN
            f_menu_item_process $MNN  # Outputs $MENU_ITEM.
      done  # End of NIC Tools Applications until loop.
            #
      unset MNN MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_nic_tools
#
# +----------------------------------------+
# |      Function f_menu_app_nic_tools2    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: MNQ, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_nic_tools2 () {
      f_initvars_menu_app "MNQ"
      until [ "$MNQ" = "0" ]
      do    # Start of NIC Tools Applications until loop.
#0^0^0^0^0    #MNQ warcarrier   - Wireless network detector ncurses-based.
#0^0^0^0^0    #MNQ wicd-curses  - Scan and connect to wired/wireless networks.
            #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="NIC Tools2 Applications Menu"
            DELIMITER="#MNQ" #MNQ This 3rd field prevents awk from printing this line into menu options.
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER"
            read MNQ
            f_menu_item_process $MNQ  # Outputs $MENU_ITEM.
      done  # End of NIC Tools Applications until loop.
            #
      unset MNQ MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_nic_tools2
#
# +----------------------------------------+
# |    Function f_menu_app_packet_tools    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MNP, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY.
#
f_menu_app_packet_tools () {
      f_initvars_menu_app "MNP"
      until [ "$MNP" = "0" ]
      do    # Start of Packet Tools Applications until loop.
#0^0^0^0^1 #MNP hunt      - Description-en: Packet sniffer can monitor, reset connections.
#0^0^0^0^1 #MNP kismet    - Wireless network detector, packet sniffer, auditor.
#1^0^0^0^1 #MNP ngrep     - Network packet analyzer.
#0^0^0^0^1 #MNP nmap      - Network Mapper, mapping, auditing, security scanning.
#1^0^0^0^1 #MNP P0f       - Sophisticated, passive traffic fingerprinting OS, browser, etc.
#0^0^0^0^1 #MNP packit    - Network auditing, spoofing, security testing.
#f_run_and_exit "snort" "snort"^0^0^0^1 #MNP snort     - Packet sniffer/logger, Network Intrusion Detection System.
#1^0^0^0^1 #MNP tcpdump   - Packet sniffer/logger.
#0^0^0^0^1 #MNP wireshark - Packet sniffer/logger.
                                #
            THIS_FILE="mod_apps-network.lib"
            MENU_TITLE="Packet Tools Applications Menu"
            DELIMITER="#MNP" #MNP This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MNP
            f_menu_item_process $MNP  # Outputs $MENU_ITEM.
      done  # End of Packet Tools Applications until loop.
            #
      unset MNP MENU_ITEM  # Throw out this variable.
} # End of function f_menu_app_packet_tools
#
# +----------------------------------------+
# |    Function f_install_speedtest-cli    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_speedtest-cli () {
      clear  # blank screen
      echo "Speedtest-cli - Test the speed of your LAN/WAN connection using Speedtest.net."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"speedtest-cli\" using wget from the author's web page."
      echo "   \"https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py\""
      echo "3. Move \"speedtest-cli\" to \"/usr/local/bin\" directory."
      echo "4.  Allow users to run speedtest-cli by setting permissions to r-x or 755."
      echo "5. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install speedtest-cli.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your home folder.
         cd ~
         #
         # 2. Download \"speedtest-cli\" using wget from the author's web page.
         wget -O speedtest-cli https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py
         #
         # 3. Move \"speedtest-cli\" to \"/usr/local/bin\" directory.
         sudo mv ~/speedtest-cli /usr/local/bin/
         #
         # 4.  Allow users to run textmaze by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/speedtest-cli
         ERROR=$? # Save error flag condition.
         #
         # 5. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc.
         #    Is the directory /usr/local/bin in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "Finished running installation script for \"speedtest-cli\"."
         echo
         echo "To run \"speedtest-cli\", select it on the \"WAN Applications2 Menu\"."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         APP_NAME="speedtest-cli" # Set to correct name for f_application_run.
         APP_NAME_INSTALL=$APP_NAME # Set for web_install if needed.
      else
         # No, Do not install speedtest-cli.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run speedtest-cli.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_speedtest-cli
#
# +----------------------------------------+
# |            Function f_arping           |
# +----------------------------------------+
#
f_arping () {
      clear # Blank the screen.
      echo "arping - Send ICMP ECHO_REQUEST to network hosts."
      echo
      echo "Usage:"
      echo "arping [-fqbDUAV] [-c count] [-w timeout] [-I device] [-s source] destination"
      echo "       -f : quit on first reply"
      echo "       -q : be quiet"
      echo "       -b : keep broadcasting, don't go unicast"
      echo "       -D : duplicate address detection mode"
      echo "       -U : Unsolicited ARP mode, update your neighbours"
      echo "       -A : ARP answer mode, update your neighbours"
      echo "       -V : print version and exit"
      echo "       -c count : how many packets to send"
      echo "       -w timeout : how long to wait for a reply"
      echo "       -I device : which ethernet device to use (eth0)"
      echo "       -s source : source ip address"
      echo "       destination : ask for what ip address"
      echo
      echo "*** For more help type: 'man arping'"
      echo "                        'arping --help'"
      echo
      echo "Arpinging this PC (localhost) for 5 times as an example."
      echo "Now run arping. Usage: arping localhost -c 5"
      APP_NAME="arping localhost -c 5"
      f_press_enter_key_to_continue
} # End of function f_arping
#
# +----------------------------------------+
# |         Function f_arptables           |
# +----------------------------------------+
#
f_arptables () {
      clear # Blank the screen.
      echo "arptables - Administration tool for ARP tables."
      echo
      echo "Usage:"
      echo "arptables [-t table] -[AD] chain rule-specification [OPTIONS]"
      echo "arptables [-t table] -[RI] chain rulenum rule-specification [OPTIONS]"
      echo "arptables [-t table] -D chain rulenum [OPTIONS]"
      echo "arptables [-t table] -[LFZ] [CHAIN] [OPTIONS]"
      echo "arptables [-t table] -[NX] chain"
      echo "arptables [-t table] -E old-chain-name new-chain-name"
      echo "arptables [-t table] -P chain target [OPTIONS]"
      echo
      echo "arptables  is  a user space tool, it is used to set up and maintain the"
      echo "tables of ARP rules in the Linux kernel. These rules  inspect  the  ARP"
      echo "frames  which  they  see.   arptables is analogous to the iptables user"
      echo "space tool, but arptables is less complicated."
      echo
      echo "*** For more help type: 'man arptables'"
      echo "                        'arptables --help"
      echo
      echo "List all ARP chains on this PC (localhost)."
      echo "Now run arptables. Usage: sudo arptables --list"
      APP_NAME="sudo arptables --list"
      f_press_enter_key_to_continue
} # End of function f_arptables
#
# +----------------------------------------+
# |           Function f_ethtool           |
# +----------------------------------------+
#
f_ethtool () {
      # If APP_NAME has no spaces, then no ethernet card is specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then 
         clear # Blank the screen.
         echo "ethtool - Query and control network driver and hardware settings."
         echo
         echo "Usage:" 
         echo "ethtool <OPTIONS> <NIC device name>"
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         echo "Now run ethtool. Usage: ethtool -i <NIC device name>"
         echo "The option -i shows network driver information for <NIC device name>"
         echo
         f_find_NIC
         APP_NAME="ethtool -i $ANS"
         unset ANS
      fi
} # End of function f_ethtool
#
# +----------------------------------------+
# |          Function f_find_NIC           |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: XSTR.
# Outputs: ANS.
#
f_find_NIC () {
# Search for "Link" in ifconfig output and parse first word (network interface).
ANS=""
XSTR=$(ifconfig | grep Link | awk '{print $1}')
while [ -z "$ANS" ]
do
      clear  # Blank the screen.
      echo "Finding all network interfaces..."
      ifconfig |  grep Link | awk '{print $1}'
      echo -n "Enter FULL-NAME of network interface (Default is eth0): "
      read ANS
      if [ -z "$ANS" ] ; then
         ANS="eth0"
      fi
      #
      if [[ ! "$XSTR" == *"$ANS"* ]] ; then
         ANS=""
      fi
      echo
      echo The network interface you chose is: $ANS
done
export ANS
unset ANS XSTR
} # End of function f_find_NIC
#
# +----------------------------------------+
# |             Function f_geoip           |
# +----------------------------------------+
#
f_geoip () {
      clear # Blank the screen.
      echo "Please note:"
      echo
      echo "This software is packaged for RPM only. RHEL, CentOS, etc. distributions."
      echo
      echo "       The run-time command is: geoiplookup."
      echo
      echo "The RPM name of the package is: geoip."
      echo
      echo "To install the program the RPM package name is 'geoip' but to run the program"
      echo "from the command line, the run-time command is 'geoiplookup'."
      f_press_enter_key_to_continue
} # End of function f_geoip
#
# +----------------------------------------+
# |           Function f_ifstat            |
# +----------------------------------------+
#
f_ifstat () {
      clear # Blank the screen.
      echo "ifstat - Display bandwidth statistics."
      echo
      echo "ifstat this PC's NIC (localhost) for 5 times every 2 seconds as an example."
      echo
      echo "Now run ifstat. Usage: ifstat 2 5"
      APP_NAME="ifstat 2 5"
      f_press_enter_key_to_continue
} # End of function f_ifstat
#
# +----------------------------------------+
# |            Function f_iftop            |
# +----------------------------------------+
#
f_iftop () {
      if [[ ! "$APP_NAME" == *" -i"* ]] ; then
         f_find_NIC
         APP_NAME="iftop -i $ANS"
         unset ANS
      fi
} # End of function f_iftop
#
# +----------------------------------------+
# |              Function f_ip             |
# +----------------------------------------+
#
f_ip () {
      clear # Blank the screen.
      echo "IP - manipulate routing, devices, policy routing and tunnels."
      echo
      echo "Usage:"
      echo "ip [ OPTIONS ] OBJECT { COMMAND | help }"
      echo "OBJECT := { link | addr | addrlabel | route | rule | neigh | tunnel | maddr |"
      echo " mroute }"
      echo "link      - network device."
      echo "address   - protocol (IP or IPv6) address on a device."
      echo "addrlabel - label configuration for protocol address selection."
      echo "neighbor  - ARP or NDISC cache entry."
      echo "route     - routing table entry."
      echo "rule      - rule in routing policy database."
      echo "maddress  - multicast address."
      echo "mroute    - multicast routing cache entry."
      echo "tunnel    - tunnel over IP."
      echo
      echo "OPTIONS := { -V[ersion] | -s[tatistics] | -r[esolve] | -f[amily] { inet | inet6"
      echo "             | ipx | dnet | link } | -o   OBJECT"
      echo
      echo "*** For more help type: 'man ip'"
      echo "                        'ip --help'"
      f_press_enter_key_to_continue
} # End of function f_ip
#
# +----------------------------------------+
# |         Function f_iptables            |
# +----------------------------------------+
#
f_iptables () {
      clear # Blank the screen.
      echo "iptables - Administration tool for IPv4 packet filtering and NAT."
      echo
      echo "Usage:"
      echo "iptables [-t table] {-A|-C|-D} chain rule-specification"
      echo
      echo "*** For more help type: 'man iptables'"
      echo "                        'iptables --help'"
      echo
      echo "List all chains of the IPv4 packet filter (firewall) on this PC (localhost)."
      echo
      echo "Now run iptables. Usage: iptables --list"
      APP_NAME="iptables --list"
      f_press_enter_key_to_continue
} # End of function f_iptables
#
# +----------------------------------------+
# |           Function f_iwlist            |
# +----------------------------------------+
#
f_iwlist () {
      # If APP_NAME has no spaces, then no ethernet card is specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         f_find_NIC
         echo "Usage: iwlist $ANS scanning [essid NNN] [last]      iwlist $ANS retry"
         echo "       iwlist $ANS frequency                        iwlist $ANS ap"
         echo "       iwlist $ANS channel                          iwlist $ANS accesspoints"
         echo "       iwlist $ANS bitrate                          iwlist $ANS peers"
         echo "       iwlist $ANS rate                             iwlist $ANS event"
         echo "       iwlist $ANS encryption                       iwlist $ANS auth"
         echo "       iwlist $ANS keys                             iwlist $ANS wpakeys"
         echo "       iwlist $ANS power                            iwlist $ANS genie"
         echo "       iwlist $ANS txpower                          iwlist $ANS modulation"
         echo
         echo "Usage: iwlist $ANS <command>"
         echo -n "Enter iwlist $ANS command: "
         read XSTR
         APP_NAME="iwlist $ANS $XSTR"
         unset ANS XSTR
      fi
} # End of function f_iwlist
#
# +----------------------------------------+
# |           Function f_jnettop           |
# +----------------------------------------+
#
f_jnettop () {
      if [[ ! "$APP_NAME" == *" -i"* ]] ; then
         f_find_NIC
         APP_NAME="jnettop -i $ANS"
         unset ANS
      fi
} # End of function f_jnettop
#
# +----------------------------------------+
# |         Function f_macchanger          |
# +----------------------------------------+
#
f_macchanger () {
      # If APP_NAME has no spaces, then neither [OPTIONS] nor ethernet card are specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         clear # Blank the screen.
         echo "macchanger - Change the MAC hardware address of a NIC."
         echo
         echo "Usage:"
         echo "macchanger [OPTIONS] DEVICE"
         echo
         echo "Options:"
         echo "-a --another   Set random vendor MAC of the same kind."
         echo "-A             Set random vendor MAC of any kind."
         echo "-r --random    Set fully random MAC."
         echo "-p --permanent Reset MAC to original, permanent, hardware address."
         echo "-m --mac XX:XX:XX:XX:XX:XX Manually set the MAC."
         echo "-m --mac=XX:XX:XX:XX:XX:XX Manually set the MAC."
         echo "-s --show      Show the current MAC address."
         echo
         echo "Usage: macchanger [OPTIONS] DEVICE"
         echo -n "Enter macchanger OPTIONS: "
         read XSTR
         f_find_NIC
         APP_NAME="macchanger $XSTR $ANS"
         unset ANS XSTR
      fi
} # End of function f_macchanger
#
# +----------------------------------------+
# |              Function f_mtr            |
# +----------------------------------------+
#
f_mtr () {
      clear # Blank the screen.
      echo "mtr - Network diagnostic tool with the functionality of traceroute and ping."
      echo
      echo "Usage:"
      echo "mtr [-hvrctglspniu46]  [--help] [--version] [--report] [--report-wide]"
      echo "    [--report-cycles COUNT] [--curses] [--split] [--raw] [--no-dns] [--gtk]"
      echo "    [--address IP.ADD.RE.SS] [--interval SECONDS] [--psize BYTES | -s BYTES]"
      echo "    HOSTNAME [PACKETSIZE]"
      echo
      echo "*** For more help type: 'man $APP_NAME'"
      echo "                        '$APP_NAME --help'"
      echo
      echo "mtr of this PC (localhost) as an example."
      echo
      echo "Now run mtr. Usage: mtr localhost"
      f_press_enter_key_to_continue
} # End of function f_mtr
#
# +----------------------------------------+
# |           Function f_nagios3           |
# +----------------------------------------+
#
f_nagios3 () {
      clear # Blank the screen.
      echo "nagios3 - network/systems status monitoring daemon."
      echo
      echo "nagios3  is a daemon program that monitors the status of various network"
      echo "accessible systems, devices, and more.  For more information, please consult"
      echo "the online documentation available at http://www.nagios.org, or on your"
      echo "nagios server's web page."
      echo
      echo "Usage:"
      echo "nagios3 [-h] [-v] [-s] [-d] <main_config_file>"
      echo
      echo "*** For more help type: 'man $APP_NAME'"
      echo "                        '$APP_NAME --help'"
      echo
      f_press_enter_key_to_continue
} # End of function f_nagios3
#
# +----------------------------------------+
# |           Function f_netload           |
# +----------------------------------------+
#
f_netload () {
      # If APP_NAME has no spaces, then neither [OPTIONS] nor ethernet card are specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         f_find_NIC
         APP_NAME="netload $ANS"
         unset ANS
      fi
} # End of function f_netload
#
# +----------------------------------------+
# |           Function f_netstat           |
# +----------------------------------------+
#
f_netstat () {
      clear # Blank the screen.
      echo "netstat - Print network connections, routing tables, interface statistics,"
      echo "          masquerade connections, and multicast memberships."
      echo
      echo "Usage:"
      echo "netstat [address_family_options]  [--tcp|-t] [--udp|-u] [--raw|-w]"
      echo "[--listening|-l] [--all|-a] [--numeric|-n] [--numeric-hosts]  ...etc."
      echo
      echo "netstat {--route|-r}  [address_family_options] [--extend|-e[--extend|-e]]"
      echo "[--verbose|-v]  [--numeric|-n]  [--numeric-hosts]   [--numeric-ports] ...etc."
      echo
      echo "netstat {--interfaces|-i}  [--all|-a] [--extend|-e[--extend|-e]] ...etc."
      echo
      echo "netstat {--groups|-g} [--numeric|-n] [--numeric-hosts] [--numeric-ports] ..etc."
      echo
      echo "*** For more help type: 'man netstat'"
      echo "                        'netstat --help'"
      echo
      echo "netstat of this PC (localhost) as an example."
      echo "Now run netstat. Usage: netstat -l"
      APP_NAME="netstat -l"
      f_press_enter_key_to_continue
} # End of function f_netstat
#
# +----------------------------------------+
# |           Function f_netwatch          |
# +----------------------------------------+
#
f_netwatch () {
      if [[ ! "$APP_NAME" == *" -e"* ]] ; then
         f_find_NIC
         APP_NAME="netwatch -e $ANS"
         unset ANS
      fi
} # End of function f_netwatch
#
# +----------------------------------------+
# |           Function f_ngrep             |
# +----------------------------------------+
#
f_ngrep () {
      clear # Blank the screen.
      echo "ngrep - Network packet analyzer."
      echo
      echo "Note: ngrep needs root permissions."
      echo "      You need to use 'sudo ngrep'."
      echo
      f_run_and_exit "ngrep" "ngrep"
} # End of function f_ngrep
#
# +----------------------------------------+
# |           Function f_nslookup          |
# +----------------------------------------+
#
f_nslookup () {
      # If APP_NAME contains <SPACES> assume that a web site has already been specified.
      # Assume that a user who is using [OPTIONS] already knows to specify a web site if needed.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         clear # Blank the screen.
         echo "nslookup - query Internet name servers interactively"
         echo
         echo "Nslookup is a program to query (DNS) Internet domain name servers."
         echo "Interactive mode queries DNS about hosts and domains or print a list of hosts"
         echo "in a domain."
         echo "Non-interactive mode prints just the host or domain name with requested"
         echo "information."
         echo
         echo "Usage:"
         echo "nslookup [-OPTION] [name | -] [server]"
         echo
         echo "i.e. nslookup -querytype=hinfo www.distrowatch.com"
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         f_web_site
         echo
         echo "Now run nslookup. Usage: $APP_NAME"
         f_press_enter_key_to_continue
      fi
} # End of function f_nslookup
#
# +----------------------------------------+
# |             Function f_ntop            |
# +----------------------------------------+
#
f_ntop () {
      clear # Blank the screen.
      echo "ntop - Traffic probe with network usage."
      echo
      echo "This command starts the ntop process."
      echo "To use ntop, open a web browser to URL localhost:3000 or 127.0.0.1:3000"
      echo
      f_press_enter_key_to_continue
      f_run_and_exit "ntop" "ntop"
} # End of function f_ntop
#
# +----------------------------------------+
# |           Function f_opennms           |
# +----------------------------------------+
#
f_opennms () {
      clear # Blank the screen.
      echo "OpenNMS - A commercial open source application and is in the menu for"
      echo "          reference only."
      echo
      echo "Description from the OpenNMS website:"
      echo "OpenNMS is an award winning network management application platform with a long"
      echo "track record of providing solutions for enterprises and carriers."
      echo "OpenNMS main features are Automated and Directed Discovery, Event and"
      echo "Notification Management, Service Assurance, Performance Measurement."
      echo
      echo "http://www.opennms.org/about/ or http://sourceforge.net/projects/opennms/"
      echo
      f_press_enter_key_to_continue
} # End of function f_opennms
#
# +----------------------------------------+
# |             Function f_ping            |
# +----------------------------------------+
#
f_ping () {
      clear # Blank the screen.
      echo "ping - Send ICMP ECHO_REQUEST to network hosts."
      echo
      echo "Usage:"
      echo "ping  [-LRUbdfnqrvVaAB] [-c count] [-m mark] [-i interval] [-l preload]"
      echo "      [-p pattern] [-s packetsize] [-t ttl] [-w deadline] [-F flowlabel]"
      echo "      [-I interface]  [-M  hint] [-N nioption] [-Q tos] [-S sndbuf]"
      echo "      [-T timestamp option] [-W timeout] [hop ...] destination"
      echo
      echo "Usage: ping destination where destination may be an IP-address or url."
      echo "       i.e. ping 192.168.1.1 or ping www.sourceforge.net"
      echo
      echo "*** For more help type: 'man ping'"
      echo "                        'ping --help'"
      echo
      echo "Pinging this PC (localhost) for 5 times as an example."
      echo
      echo "Now run ping. Usage: ping localhost -c 5"
      echo
      echo "Many web sites block pings resulting in a message: '100% packet loss'."
      APP_NAME="ping localhost -c 5"
      f_press_enter_key_to_continue
} # End of function f_ping
#
# +----------------------------------------+
# |           Function f_pktstat           |
# +----------------------------------------+
#
f_pktstat () {
      if [[ ! "$APP_NAME" == *" -i"* ]] ; then
         f_find_NIC
      echo
      echo "pktstat - Display network packet activity."
      echo
      echo "Note: pktstat needs root permissions."
      echo "      You need to use 'sudo pktstat'."
      echo
      echo "Now run pktstat. Usage: sudo pktstat -i $ANS"
         APP_NAME="sudo pktstat -i $ANS"
         unset ANS
      fi
      echo
      echo "It may take a while to quit; wait while pktstat resolves addresses."
      echo
      f_press_enter_key_to_continue
} # End of function f_pktstat
#
# +----------------------------------------+
# |         Function f_portbunny           |
# +----------------------------------------+
#
f_portbunny () {
      clear # Blank the screen.
      echo "portbunny - Fast TCP-SYN port scanner."
      echo
      echo "Usage:"
      echo "portbunny <HOST>"
      echo
      echo "*** For more help type: 'man $APP_NAME'"
      echo "                        '$APP_NAME --help'"
      echo
      f_press_enter_key_to_continue
} # End of function f_portbunny
#
# +----------------------------------------+
# |            Function f_p0f              |
# +----------------------------------------+
#
f_p0f () {
      clear # Blank the screen.
      echo "P0f uses only passive traffic fingerprinting methods to identify machines OS,"
      echo "web browser, uptime, LAN topography, server applications."
      echo
      echo "P0f can be used to monitor a network, detect network interconnects,"
      echo "and forensics."
      echo
      echo "http://lcamtuf.coredump.cx/p0f3/"
      echo
      echo "*** For more help type: 'man $APP_NAME'"
      echo "                        '$APP_NAME --help'"
      echo
      f_press_enter_key_to_continue
} # End of function f_p0f
#
# +----------------------------------------+
# |            Function f_slurm            |
# +----------------------------------------+
#
f_slurm () {
      if [[ ! "$APP_NAME" == *" -i"* ]] ; then
         f_find_NIC
         APP_NAME="slurm -i $ANS"
         unset ANS
      fi
} # End of function f_slurm
#
# +----------------------------------------+
# |           Function f_smbc              |
# +----------------------------------------+
#
f_smbc () {
      clear # Blank the screen.
      echo "man smbc - Display help for smbc (Samba Commander)."
      echo
      echo "Use on networks with Microsoft Windows PCs."
      echo
      echo "Now show help. Usage: man smbc"
      APP_NAME="man smbc"
      f_press_enter_key_to_continue
} # End of function f_smbc
#
# +----------------------------------------+
# |            Function f_sntop            |
# +----------------------------------------+
#
f_sntop () {
      clear # Blank the screen.
      echo "sntop - Network status display polls a list of hosts every few seconds."
      echo
      echo "sntop for every 3 seconds as an example."
      echo
      echo "Now run sntop. Usage: sntop --refresh=3"
      echo
      APP_NAME="sntop --refresh=3"
      f_press_enter_key_to_continue
} # End of function f_sntop
#
# +----------------------------------------+
# |         Function f_speedometer         |
# +----------------------------------------+
#
f_speedometer () {
      # If APP_NAME has no spaces, then no ethernet card is specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then 
         clear # Blank the screen.
         echo "speedometer - Display speed of transmitted/received data."
         echo
         echo "Usage:"
         echo  "speedometer [OPTIONS] tap [[-c] tap]..."
         echo
         echo "Taps:"
         echo "  -f filename [size]          display download speed [with progress bar]"
         echo "  -r network-interface        display bytes received on network-interface"
         echo "  -t network-interface        display bytes transmitted on network-interface"
         echo "  -c                          start a new column for following tap arguments"
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         echo "Now run speedometer. Usage: speedometer -s -r <NIC device name> -t <NIC device name>"
         echo "                            i.e. speedometer -s -r eth0 -t eth0"
         echo
         f_find_NIC
         APP_NAME="speedometer -s -r $ANS -t $ANS"
         echo "Now run speedometer. Usage: $APP_NAME"
         echo
         f_press_enter_key_to_continue
         unset ANS
      fi
} # End of function f_speedometer
#
# +----------------------------------------+
# |              Function f_ss             |
# +----------------------------------------+
#
f_ss () {
      clear # Blank the screen.
      echo "ss - Display TCP/UDP Network and Socket Information."
      echo
      echo "Usage:"
      echo  "ss [options] [ FILTER ]"
      echo "    -h, --help      Show summary of options."
      echo "    -a, --all       Display  both  listening  and  non-listening sockets."
      echo "    -l, --listening Display only listening sockets."
      echo "    -e, --extended  Show detailed socket information"
      echo "    -m, --memory    Show socket memory usage."
      echo "    -p, --processes Show process using socket."
      echo "    -i, --info      Show internal TCP information."
      echo "    -s, --summary   Print summary statistics."
      echo "    -4, --ipv4      Display only IP version 4 sockets (alias for -f inet)."
      echo "    -6, --ipv6      Display only IP version 6 sockets (alias for -f inet6)."
      echo "    -0, --packet    Display PACKET sockets (alias for -f link)."
      echo "    -t, --tcp       Display TCP sockets."
      echo "    -u, --udp       Display UDP sockets."
      echo "    -d, --dccp      Display DCCP sockets."
      echo "    -w, --raw       Display RAW sockets."
      echo
      echo "*** For more help type: 'man $APP_NAME'"
      echo "                        '$APP_NAME --help'"
      f_press_enter_key_to_continue
} # End of function f_ss
#
# +----------------------------------------+
# |          Function f_tcpdump            |
# +----------------------------------------+
#
f_tcpdump () {
      if [[ ! "$APP_NAME" == *" -i"* ]] ; then
         clear # Blank the screen.
         echo "tcpdump - Packet sniffer/logger."
         echo
         echo "tcpdump this PC's NIC (localhost) for 5 packets an example."
         echo
         echo "Now run tcpdump. Usage: tcpdump -i <DEVICE> -c 5"
         f_press_enter_key_to_continue
         f_find_NIC
         echo "Now run tcpdump. Usage: tcpdump -i $ANS -c 5"
         APP_NAME="tcpdump -i $ANS -c 5"
         f_press_enter_key_to_continue
      fi
} # End of function f_tcpdump
#
# +----------------------------------------+
# |         Function f_traceroute          |
# +----------------------------------------+
#
f_traceroute () {
      # If APP_NAME contains <SPACES> assume that a web site has already been specified.
      # Assume that a user who is using [OPTIONS] already knows to specify a web site if needed.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         clear # Blank the screen.
         echo "traceroute - Trace path to network host."
         echo
         echo "Usage:"
         echo "traceroute [-46dFITUnreAV] [-f first_ttl] [-g gate,...]"
         echo "           [-i device] [-m max_ttl] [-p port] [-s src_addr]"
         echo "           [-q nqueries] [-N squeries] [-t tos] [-l flow_label]"
         echo "           [-w waittime] [-z sendwait] [-UL] [-P proto] [--sport=port]"
         echo "           [-M method] [-O mod_options] [--mtu] [--back]"
         echo "host [packet_len]"
         echo "traceroute6  [OPTIONS]"
         echo "tcptraceroute  [OPTIONS]"
         echo "lft  [OPTIONS]"
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         echo "traceroute of this PC (localhost) as an example."
         echo
         echo "Now run traceroute. Usage: traceroute <URL or web-site or IP-address>"
         #
         f_web_site
         echo
         echo "Now run traceroute. Usage: $APP_NAME"
         f_press_enter_key_to_continue
      fi
} # End of f_traceroute
#
# +----------------------------------------+
# |             Function f_ufw             |
# +----------------------------------------+
#
f_ufw () {
      clear # Blank the screen.
      echo "ufw - Manage the netfilter firewall."
      echo
      echo "Usage:"
      echo "ufw [--dry-run] enable|disable|reload"
      echo "ufw [--dry-run] default allow|deny|reject [incoming|outgoing]"
      echo "ufw [--dry-run] logging on|off|LEVEL"
      echo "ufw [--dry-run] reset"
      echo "ufw [--dry-run] status [verbose|numbered]"
      echo "ufw [--dry-run] show REPORT"
      echo "ufw [--dry-run] [delete] [insert NUM] allow|deny|reject|limit [in|out]"
      echo "    [log|log-all] PORT[/protocol]"
      echo "ufw [--dry-run] [delete] [insert NUM] allow|deny|reject|limit [in|out"
      echo "    on INTERFACE] [log|log-all] [proto protocol]"
      echo "    [from ADDRESS [port PORT]] [to ADDRESS [port PORT]]"
      echo "ufw [--dry-run] delete NUM"
      echo "ufw [--dry-run] app list|info|default|update"
      echo
      echo "Display ufw firewall status of this PC (localhost) as an example."
      echo
      echo "Now run ufw. Usage: ufw status verbose"
      APP_NAME="ufw status verbose"
      f_press_enter_key_to_continue
} # End of function f_ufw
#
# +----------------------------------------+
# |          Function f_web_site           |
# +----------------------------------------+
#
#  Inputs: APP_NAME.
# Outputs: APP_NAME, WEB_SITE.
#
f_web_site () {
case $APP_NAME in # Start of case statement.
      #
      # The order of the case pattern matching clauses is necessary.
      #
      # Does $APP_NAME start with 'sudo'?
      # Does $APP_NAME have no spaces?
      # If so, treat as a web browser without a specified web site.
      #
      'sudo '*' '* | *' '*) # Command has at least one space.
      # It is assumed that users who do "sudo <application name> <options>"
      # know what they are doing and do not need to be prompted to provide
      # a web site and do not call f_web_site in the app's case statements.
      # i.e. "sudo nslookup www.lxer.com"
      #
      # This case pattern matching statement will allow any other sudo formats
      # i.e. For links web browser:
      #      "sudo -width 80 links -driver atheos -html-images 0".
      ;;
      *[!' ']*) # It has no spaces in name. No spaces means no web site specified.
      echo
      echo "When using a web browser or network application directly from the command line,"
      echo "use the syntax: $APP_NAME [WEB_SITE]"
      echo
      echo -n "Enter the name of the web site (i.e. www.lxer.com): "
      read WEB_SITE
      #
      # If no web site specified, default to a web site. Note the test command
      # has $WEB_SITE in quotes because it may not be set prior to this test.
      if [ -z "$WEB_SITE" ] ; then
         WEB_SITE="http://www.lxer.com"
      fi
      #
      APP_NAME="$APP_NAME $WEB_SITE"
      ;;
esac  # End of case statement.
} # End of function f_web_site
#
