# Â©2016 Copyright 2016 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="March-15-2015 23:00"
#
# +----------------------------------------+
# |       Function f_menu_cat_games        |
# +----------------------------------------+
#
#  Inputs: $GUI.
#    Uses: None.
# Outputs: None.
#
f_menu_cat_games () {
      case $GUI in
           dialog | whiptail)
           f_menu_cat_games_gui
           ;;
           text)
           f_menu_cat_games_txt
           ;;
      esac
} # End of function f_menu_cat_games
#
# +----------------------------------------+
# |     Function f_menu_cat_games_txt      |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: BGA, MENU_ITEM, MAX
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_cat_games_txt () {
      f_initvars_menu_app "BGA"
      until [ "$BGA" = "0" ]
      do    # Start of Application Category until loop.
#f_menu_app_games_arcade      #BGA Arcade Games   - Action controlled by keyboard and player's reflexes.
#f_menu_app_games_board       #BGA Board Games    - Classic board games.
#f_menu_app_games_card        #BGA Card Games     - Played with a deck of playing cards.
#f_menu_app_games_mud         #BGA MUD Games      - Multi-user dungeon adventure games.
#f_menu_app_games_puzzle      #BGA Puzzles        - Mastermind clones, suduku, mazes, create punch card/tapes.
#f_menu_app_games_quiz        #BGA Quiz Games     - Challenge your mind.
#f_menu_app_games_rpg         #BGA RPG Games      - Single-player role-playing games.
#f_menu_app_games_screensaver #BGA Screen-savers  - For when you're away.
#f_menu_app_games_simulation  #BGA Sims/Anims     - Simulations and animations. ASCII movies.
#f_menu_app_games_strategy    #BGA Strategy Games - 1-2 Players.
#f_menu_app_games_word        #BGA Word Games     - Boggle, hangman, pig-latin, create banners.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Game Categories Menu"
            DELIMITER="#BGA" #BGA This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read BGA
            f_menu_item_process $BGA  # Outputs $MENU_ITEM.
      done  # End of Game Category until loop.
            #
      unset BGA MENU_ITEM  # Throw out this variable.
} # End of function f_menu_cat_games_txt
#
# +----------------------------------------+
# |     Function f_menu_cat_games_gui      |
# +----------------------------------------+
#
#  Inputs: GUI.
#    Uses: BGA, MENU_TITLE, THIS_FILE.
# Outputs: None.
#
f_menu_cat_games_gui () {
      f_initvars_menu_app "BGA"
      until [ "$BGA" = "0" ]
      do    # Start of Games Category until loop.
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Game Categories Menu"
            BGA=$($GUI --title "$MENU_TITLE" --menu "\n\nUse (up/down arrow keys) or (letters):" 20 80 11 \
            "Return"         "Return to previous menu." \
            "Arcade Games"   "Action controlled by keyboard and player's reflexes." \
            "Board Games"    "Classic board games." \
            "Card Games"     "Played with a deck of playing cards." \
            "MUD Games"      "Multi-user dungeon adventure games." \
            "Puzzles"        "Mastermind clones, suduku, mazes, create punch card/tapes." \
            "Quiz Games"     "Challenge your mind." \
            "RPG Games"      "Single-player role-playing games." \
            "Screen-savers"  "For when you're away." \
            "Sims/Anims"     "Simulations and animations. ASCII movies." \
            "Strategy Games" "1-2 Players." \
            "Word Games"     "boggle, hangman, pig-latin, create banners." \
            2>&1 >/dev/tty)
            #
            case $BGA in
                 "Return") BGA=0 ;;
                 "Arcade Games") f_menu_app_games_arcade ;;
                 "Board Games") f_menu_app_games_board ;;
                 "Card Games") f_menu_app_games_card ;;
                 "MUD Games") f_menu_app_games_mud ;;
                 "Puzzles") f_menu_app_games_puzzle ;;
                 "Quiz Games") f_menu_app_games_quiz ;;
                 "RPG Games") f_menu_app_games_rpg ;;
                 "Screen-savers") f_menu_app_games_screensaver ;;
                 "Sims/Anims") f_menu_app_games_simulation ;;
                 "Strategy Games") f_menu_app_games_strategy ;;
                 "Word Games") f_menu_app_games_word ;;
            esac
            #
      done  # End of Games Category until loop.
            #
      unset BGA THIS_FILE MENU_TITLE  # Throw out this variable.
} # End of function f_menu_cat_games_gui
#
# +----------------------------------------+
# |    Function f_menu_app_games_arcade    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGA, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_arcade () {
      f_initvars_menu_app "MGA"
      until [ "$MGA" = "0" ]
      do    # Start of Arcade Games until loop.
#0^1^0^0^0  #MGA ascii-invaders - Space Invader clone.
#0^0^0^0^0  #MGA asciijump      - Ski jump game.
#1^1^0^0^0  #MGA asciiportal    - ASCIIpOrtal, go through a side-scrolling puzzle maze.
#0^0^0^0^1  #MGA freesweep      - Minesweeper game.
#0^1^0^0^0  #MGA galaxis        - Find lifeboats in space before oxygen runs out.
#0^1^0^0^0  #MGA gnuski         - Downhill skiing while avoiding trees.
#0^0^0^0^0  #MGA moon-buggy     - Drive a moon buggy on the moon.
#0^0^0^1^1  #MGA ninvaders      - Space invaders-like game ncurses-based.
#0^0^0^0^0  #MGA nsnake         - Variation of BSD's snake game.
#f_menu_app_games_pacman^0^0^0^0 #MGA Pac-Man        - "Pac-Man" clones.
#0^0^0^0^0  #MGA robots         - Be chased by killer robots.
#0^0^0^18^0 #MGA snake          - Be chased by a snake while collecting money.
#0^0^0^0^0  #MGA spacezero      - Space combat in real-time, 2-player network game.
#f_menu_app_games_tetris^0^0^0^0 #MGA Tetris         - "Tetris" clones.
#0^0^0^9^0  #MGA worm           - Be a growing worm, don't crash into yourself.
#f_menu_app_games_arcade2^0^0^0^0 #MGA MORE...        - For more arcade game applications.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Arcade Games Menu"
            DELIMITER="#MGA" #MGA This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGA
            f_menu_item_process $MGA  # Outputs $MENU_ITEM.
            done  # End of Arcade Games until loop.
            #
      unset MGA MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_arcade
#
# +----------------------------------------+
# |    Function f_menu_app_games_arcade2   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGB, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_arcade2 () {
      f_initvars_menu_app "MGB"
      until [ "$MGB" = "0" ]
      do    # Start of Arcade2 Games until loop.
#0^1^0^1^0  #MGB xorcurses - Based on Xor released in 1987 by Astral Software.
#0^0^0^18^0 #MGB zsnake    - Variation of BSD's snake game.
#0^1^0^0^0  #MGB ztrack    - First-person car racing game in amazing 3-D ASCII.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Arcade2 Games Menu"
            DELIMITER="#MGB" #MGB This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGB
            f_menu_item_process $MGB  # Outputs $MENU_ITEM.
            done  # End of Arcade2 Games until loop.
            #
      unset MGB MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_arcade2
#
# +----------------------------------------+
# |     Function f_menu_app_games_board    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGC, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_board () {
      f_initvars_menu_app "MGC"
      until [ "$MGC" = "0" ]
      do    # Start of Board Games until loop.
#1^0^0^1^0 #MGC atom4      - Board game strategy 2-player ncurses-based.
#0^0^0^1^0 #MGC backgammon - Backgammon.
#1^0^0^0^0 #MGC gnubg      - Gnu Backgammon played either from console or GTK+ GUI.
#0^0^0^2^0 #MGC monop      - Monopoly-like game.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Board Games Menu"
            DELIMITER="#MGC" #MGC This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGC
            f_menu_item_process $MGC  # Outputs $MENU_ITEM.
            done  # End of Board Games until loop.
            #
      unset MGC MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_board
#
# +----------------------------------------+
# |     Function f_menu_app_games_card     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGD, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_card () {
      f_initvars_menu_app "MGD"
      until [ "$MGD" = "0" ]
      do    # Start of Card Games until loop.
#0^0^0^0^0 #MGD canfield     - Solitaire card game with betting.
#0^0^0^0^0 #MGD cpat         - Solitaire collection; curses-based.
#f_run_and_exit "Cribbage" "cribbage"^0^0^0^0 #MGD cribbage     - Cribbage Card game.
#0^0^0^0^0 #MGD dsol         - dSol Solitaire card game.
#0^0^0^0^0 #MGD freecell     - Freecell card game.
#0^0^0^0^0 #MGD go-fish      - Go Fish card game.
#0^0^0^0^0 #MGD ttysolitaire - Color ncurses-based solitaire game.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Card Games Menu"
            DELIMITER="#MGD" #MGD This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGD
            f_menu_item_process $MGD  # Outputs $MENU_ITEM.
            done  # End of Card Games until loop.
            #
      unset MGD MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_card
#
# +----------------------------------------+      
# |      Function f_menu_app_games_mud     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGE, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_mud () {
      f_initvars_menu_app "MGE"
      until [ "$MGE" = "0" ]
      do    # Start of MUD Games until loop.
#0^0^0^0^1 #MGE crawl    - Explore a cave, retrieve the Orb of Zot.
#0^0^0^0^1 #MGE tintin++ - Telnet client to play MUDs (Multi-User Dungeons).
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="MUD Games Menu"
            DELIMITER="#MGE" #MGE This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGE
            f_menu_item_process $MGE  # Outputs $MENU_ITEM.
            done  # End of MUD Games until loop.
            #
      unset MGE MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_mud
#
# +----------------------------------------+
# |    Function f_menu_app_games_pacman    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGM, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_pacman () {
      f_initvars_menu_app "MGM"
      until [ "$MGM" = "0" ]
      do    # Start of "Pac-Man"-like Games until loop.
#0^0^0^0^1 #MGM myman          - "Pac-Man"-like game, ncurses-based.
#0^0^0^0^1 #MGM pacman4console - "Pac-Man"-like game, ncurses-based.
#0^0^0^0^0 #MGM yaourt         - "Pac-Man"-like game, ncurses-based.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="\"Pac-Man\"-like Games Menu"
            DELIMITER="#MGM" #MGM This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGM
            f_menu_item_process $MGM  # Outputs $MENU_ITEM.
            done  # End of "Pac-Man"-like Games until loop.
            #
      unset MGM MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_pacman
#
# +----------------------------------------+
# |    Function f_menu_app_games_puzzle    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGF, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_puzzle () {
      f_initvars_menu_app "MGF"
      until [ "$MGF" = "0" ]
      do    # Start of Puzzle Games until loop.
#1^1^0^0^0    #MGF asciiportal   - ASCIIpOrtal, go through a side-scrolling puzzle maze.
#f_run_and_exit "bcd" "bcd"^0^0^0^0 #MGF bcd           - Reformat input as a punch card.
#0^0^0^0^1    #MGF dab           - 2-players try to complete the most boxes.
#0^0^0^0^0    #MGF braincurses   - Guess the pattern of 4 pegs in 4 colors.
#0^0^0^0^0    #MGF greed         - Greed numbers game, ncurses-based.
#0^0^0^0^0    #MGF masterm       - Guess the pattern of 4 pegs in 5 colors.
#0^0^0^0^0    #MGF mastermind-nc - Guess the pattern of 4 pegs in 5 colors.
#0^0^0^0^0    #MGF moo           - Guess the pattern of 4 digits of 1-9.
#0^0^0^0^0    #MGF nettoe        - Tic-tac-toe vs. PC or networked human.
#0^0^0^0^0    #MGF nsuduko       - Suduko game.
#0^0^0^0^0    #MGF pente         - 5 in a row game.
#f_run_and_exit "ppt" "ppt"^0^0^0^0 #MGF ppt           - Reformat input as a paper tape.
#0^1^0^1:NC^1 #MGF textmaze      - Find the exit to the maze.
#0^1^0^1^0    #MGF xorcurses     - Based on Xor released in 1987 by Astral Software.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Puzzle Games Menu"
            DELIMITER="#MGF" #MGF This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGF
            f_menu_item_process $MGF  # Outputs $MENU_ITEM.
            done  # End of Puzzle Games Applications until loop.
            #
      unset MGF MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_puzzle
#
# +----------------------------------------+
# |      Function f_menu_app_games_quiz    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGG, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_quiz () {
      f_initvars_menu_app "MGG"
      until [ "$MGG" = "0" ]
      do    # Start of Quiz Games until loop.
#0^0^0^10^0 #MGG arithmetic - Basic arithmetic quiz.
#0^0^0^0^0  #MGG geekcode   - Code tells others how geeky you are.
#0^0^0^10^0 #MGG morse      - Morse code training.
#0^0^0^1^1  #MGG quiz       - Quiz with choice of assorted topics.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Quiz Games Menu"
            DELIMITER="#MGG" #MGG This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGG
            f_menu_item_process $MGG  # Outputs $MENU_ITEM.
            done  # End of Quiz Games until loop.
            #
      unset MGG MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_quiz
#
# +----------------------------------------+
# |      Function f_menu_app_games_rpg     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGH, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_rpg () {
      f_initvars_menu_app "MGH"
      until [ "$MGH" = "0" ]
      do    # Start of RPG Games until loop.
#0^0^0^7^1 #MGH adventure  - Explore Colossal Cave. 
#0^0^0^0^1 #MGH battlestar - Tropical adventure game.
#0^0^0^0^1 #MGH GearHead   - Post-nuclear apocalyptic game with 150 machines of destruction.
#0^0^0^0^1 #MGH hack       - Explore the Dungeons of Doom.
#0^0^0^0^1 #MGH nethack    - Retrieve the Amulet of Yendor in the  20th dungeon level.
#0^0^0^0^1 #MGH overkill   - 2-D ASCII shooter game.
#0^0^0^0^1 #MGH phantasia  - Fight monsters and other players.
#0^0^0^0^1 #MGH slashem    - Enter the Dungeons of Doom.
#0^0^0^0^1 #MGH wump       - Hunt the Wumpus, watch out for bats, pits.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="RPG Games Menu"
            DELIMITER="#MGH" #MGH This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGH
            f_menu_item_process $MGH  # Outputs $MENU_ITEM.
            done  # End of RPG Games until loop.
            #
      unset MGH MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_rpg
#
# +----------------------------------------+
# |  Function f_menu_app_games_screensaver |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MSS, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_screensaver () {
      f_initvars_menu_app "MSS"
      until [ "$MSS" = "0" ]
      do    # Start of Screen-saver Applications until loop.
            #f_hint^0^0^8:NC^0  #MSS aafire       - Fire on screen.
            #f_hint^1^0^22:NC^0 #MSS asciiquarium - Aquarium on screen.
            #f_hint^0^0^8:NC^0  #MSS boinctui     - Not a screen-saver but an idle-CPU BOINC software manager.
            #f_hint^1^0^23:NC^0 #MSS bsod         - Simulate Microsoft XP "Blue screen of death".
            #f_hint^1^0^8:NC^0  #MSS cclock       - Digital clock with huge numbers fills entire screen.
            #f_hint^0^0^1:NC^0  #MSS cmatrix      - Matrix-like screen-saver.
            #f_hint^0^0^8:NC^0  #MSS mrzoom       - Displays fractal images. A Mandelbrot fractal explorer.
            #f_hint^0^0^8:NC^0  #MSS ncmatrix     - Matrix-like screen-saver and network traffic visualizer.
            #f_hint^0^0^8:NC^0  #MSS rain         - Rain on screen.
            #f_hint^0^0^8:NC^0  #MSS termsaver    - Screensaver for text terminals.
            #f_hint^1^0^1:NC^1  #MSS textmaze     - Playable Maze on screen
            #f_hint^0^0^8:NC^0  #MSS ticker       - Scrolls text across the screen.
            #f_hint^0^0^8:NC^0  #MSS tty-clock    - Display a digital clock full-screen.
            #f_hint^0^0^8:NC^0  #MSS weatherspect - Displays weather information with wallpaper.
            #f_hint^0^0^8:NC^0  #MSS worms        - Worms wiggle on the screen.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Screen-saver Games Menu"
            DELIMITER="#MSS" #MSS This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MSS
            f_menu_item_process $MSS  # Outputs $MENU_ITEM.
      done   # End of Screen-saver Applications until loop.
            #
      unset MSS MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_screensaver
#
# +----------------------------------------+
# |  Function f_menu_app_games_simulation  |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGI, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_simulation () {
      f_initvars_menu_app "MGI"
      until [ "$MGI" = "0" ]
      do    # Start of Simulation Games until loop.
#f_run_and_exit "Air Traffic Controller" "atc"^0^0^0^1 #MGI atc       - Air traffic controller.
#0^0^0^1^0  #MGI bb        - ASCII-art movie demo based on AAlib.
#0^0^0^1^0  #MGI sail      - Command a Man O'War fighting ship.
#0^0^0^0^0  #MGI sl        - Steam locomotive (when you mis-type 'ls' command).
#1^1^0^0^1  #MGI sst       - Super Star Trek. Many enhancements, read sst.doc for details.
#0^1^0^0^1  #    startrek  - Super Star Trek Clasic (v1.1 1996) by Chris Nystrom.
            #    Note: Game "startrek" is commented out of this menu because of C compile problems.
            #          However the f_install_startrek code is still listed below
            #          because it still retrieves the source C code.
#1^0^0^16^0 #MGI trek      - Star Trek blast Klingons.
#1^1^0^0^1  #MGI trekx     - Trek 73 (1973) ported from Turbo PASCAL to C by Howard Chu.
#f_starwars^0^0^0^0 #MGI star wars - Star Wars movie in ASCII.
#0^1^0^0^0  #MGI ztrack    - First-person car racing game.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Simulation Games and Animation Menu"
            DELIMITER="#MGI" #MGI This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGI
            f_menu_item_process $MGI  # Outputs $MENU_ITEM.
            done  # End of Simulation Games until loop.
            #
      unset MGI MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_simulation
#
# +----------------------------------------+
# |   Function f_menu_app_games_strategy   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGJ, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_strategy () {
      f_initvars_menu_app "MGJ"
      until [ "$MGJ" = "0" ]
      do    # Start of Strategy Games until loop.
#0^0^0^1^0 #MGJ empire     - War game build armies, planes, ships, capture cities.
#0^0^0^0^0 #MGJ gomoku     - 2-player game of 5-in-a-row.
#0^0^0^0^0 #MGJ hunt       - Multi-user game. Kill everyone else.
#0^0^0^0^0 #MGJ mille      - Travel 700 miles card game.
#0^0^0^0^0 #MGJ vms-empire - "Risk"-like game of moving armies to conquer continents.
#1^0^0^0^1 #MGJ wargames   - Computer prompt from movie "War Games". 
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Strategy Games Menu"
            DELIMITER="#MGJ" #MGJ This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGJ
            f_menu_item_process $MGJ  # Outputs $MENU_ITEM.
            done  # End of Strategy Games until loop.
            #
      unset MGJ MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_strategy
#
# +----------------------------------------+
# |    Function f_menu_app_games_tetris    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGL, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_tetris () {
      f_initvars_menu_app "MGL"
      until [ "$MGL" = "0" ]
      do    # Start of Tetris Games until loop.
#0^0^0^0^0 #MGL bastet   - Tetris-like game.
#0^0^0^0^0 #MGL ctris    - Tetris-like game.
#0^0^0^0^0 #MGL lexter   - Create words in a Tetris-like game.
#1^0^0^0^0 #MGL netris   - Tetris-like game.
#0^0^0^5^0 #MGL petris   - Tetris-like game.
#0^0^0^0^0 #MGL tetrix   - Tetris-like game.
#0^0^0^5^0 #MGL vitetris - tetris-like game; 1-2 players, network play, custom graphics etc.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Tetris-like Games Menu"
            DELIMITER="#MGL" #MGL This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGL
            f_menu_item_process $MGL  # Outputs $MENU_ITEM.
            done  # End of Tetris Games until loop.
            #
      unset MGL MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_tetris
#
# +----------------------------------------+
# |     Function f_menu_app_games_word     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGK, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_word () {
      f_initvars_menu_app "MGK"
      until [ "$MGK" = "0" ]
      do    # Start of Word Games until loop.
#0^0^0^10^0 #MGK boggle    - Word search game.
#1^0^0^0^1  #MGK boxes     - Displays text with a decorative display.
#0^0^0^10^0 #MGK figlet    - Creates banner with outline font.
#0^0^0^0^1  #MGK fortune   - Displays witty words and sayings.
#0^0^0^0^1  #MGK hangman   - Classic hangman word game.
#0^0^0^10^1 #MGK hodie     - Date and time in Latin.
#0^0^0^0^0  #MGK letterize - Creates strings from numbers on a touch-tone telephone keypad.
#0^0^0^0^1  #MGK lexter    - Create words in a Tetris-like game.
#0^0^0^10^0 #MGK pig       - Converts text into pig-latin.
#1^0^0^0^1  #MGK rev       - Reverse typing (not Boston Red Sox "Reverse the Curse").
#0^0^0^0^1  #MGK rl        - Randomize Lines scrambles words of a text file.
#0^0^0^0^1  #MGK shuf      - Randomize Lines scrambles words of a text file.
#0^0^0^0^1  #MGK tac       - Display text file in reverse line order, last line first.
#0^0^0^10^0 #MGK toilet    - Creates banner with bold font.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Word Games Menu"
            DELIMITER="#MGK" #MGK This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGK
            f_menu_item_process $MGK  # Outputs $MENU_ITEM.
            done  # End of Word Games until loop.
            #
      unset MGK MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_word
#
# +----------------------------------------+
# |   Function f_install_ascii-invaders    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_ascii-invaders () {
      clear  # blank screen
      echo "ascii-invaders - An ASCII-art game like Space Invaders using Curses."
      echo "(c) 2001, 2013 Thomas Munro"
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"ascii-invaders\" using wget from the author's web page."
      echo "   \"https://github.com/macdice/ascii-invaders/archive/master.zip\""
      echo "3. Decompress and create the installation subdirectory ~/bin/ascii-invaders"
      echo "4. Compile the C source code to create the \"invaders\" file."
      echo "5. Copy \"invaders\" to \"/usr/local/bin\" directory."
      echo "6. Allow users to run \"invaders\" by setting permissions to r-x or 755."
      echo "7. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install ascii-invaders.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your ~/bin/ascii-invaders folder.
         cd ~
         if [ ! -d "~/bin" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin
         fi
         #
         if [ ! -d "~/bin/ascii-invaders" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin/ascii-invaders
         fi
         #
         cd ~/bin/ascii-invaders
         # 
         # 2. Download "ascii-invaders" using wget from the author's web page.
         wget https://github.com/macdice/ascii-invaders/archive/master.zip
         #
         # 3. Decompress ascii-invaders-master.zip
         unzip master.zip 
         #
         # 3. Compile the C source code to create the ascii-invaders file.
         cd ascii-invaders-master
         make invaders.c 
         #
         # 4. Move "ascii-invaders" to "/usr/local/bin" directory.
         sudo cp invaders /usr/local/bin/
         #
         # 5.  Allow users to run "ascii-invaders" by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/invaders
         ERROR=$? # Save error flag condition.
         #
         # 6. Add directory "/usr/local/bin" to your PATH command in ~/.bashrc.
         #    Is the directory "/usr/local/bin" in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "------------------------------------------------------"
         echo "Finished running installation script for \"ascii-invaders\"."
         echo "------------------------------------------------------"
         echo
         echo "To run \"ascii-invaders\", select it on the \"Arcade Games Menu\"."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Since dependent packages may have been installed causing
         # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
         # original name along with APP_NAME_INSTALL for web install.
         #
         # Set APP_NAME to correct name for f_application_run.
         APP_NAME="ascii-invaders"
         #
         # Set APP_NAME_INSTALL for f_application_web_install.
         APP_NAME_INSTALL=$APP_NAME
         #
      else
         # No, Do not install ascii-invaders.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_ascii-invaders
#
# +----------------------------------------+
# |     Function f_install_asciiportal     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_asciiportal () {
      clear  # blank screen
      echo "asciiportal - An ASCII-art game like Space Invaders using Curses."
      echo "(c) 2001, 2013 Thomas Munro"
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"asciiportal\" using wget from the author's web page."
      echo "   \"https://github.com/cymonsgames/ASCIIpOrtal/archive/master.zip\""
      echo "3. Decompress and create the installation subdirectory ~/bin/asciiportal"
      echo "4. Compile the C source code to create the \"asciiportal\" file."
      echo "5. Copy \"asciiportal\" to \"/usr/local/bin\" directory."
      echo "6. Allow users to run \"asciiportal\" by setting permissions to r-x or 755."
      echo "7. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install asciiportal.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your ~/bin/asciiportal folder.
         cd ~
         if [ ! -d "~/bin" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin
         fi
         #
         if [ ! -d "~/bin/asciiportal" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin/asciiportal
         fi
         #
         cd ~/bin/asciiportal
         # 
         # 2. Download "asciiportal" using wget from the author's web page.
         wget https://github.com/cymonsgames/ASCIIpOrtal/archive/master.zip
         #
         # 3. Decompress asciiportal-master.zip
         unzip master.zip 
         #
         # 3. Compile the C source code to create the asciiportal file.
         cd ASCIIpOrtal-master
         make
         #
         # 4. Move "asciiportal" to "/usr/local/bin" directory.
         sudo cp asciiportal /usr/local/bin/
         #
         # 5.  Allow users to run "asciiportal" by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/asciiportal
         ERROR=$? # Save error flag condition.
         #
         # 6. Add directory "/usr/local/bin" to your PATH command in ~/.bashrc.
         #    Is the directory "/usr/local/bin" in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "------------------------------------------------------"
         echo "Finished running installation script for \"asciiportal\"."
         echo "------------------------------------------------------"
         echo
         echo "To run \"asciiportal\", select it on the \"Arcade Games Menu\"."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Since dependent packages may have been installed causing
         # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
         # original name along with APP_NAME_INSTALL for web install.
         #
         # Set APP_NAME to correct name for f_application_run.
         APP_NAME="asciiportal"
         #
         # Set APP_NAME_INSTALL for f_application_web_install.
         APP_NAME_INSTALL=$APP_NAME
         #
      else
         # No, Do not install asciiportal.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_asciiportal
#
# +----------------------------------------+
# |     Function f_install_asciiquarium    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, APP_NAME, MENU_ITEM (both set to null).
#
f_install_asciiquarium () {
      if [ ! -r "/usr/local/bin/asciiquarium" ] ; then
         clear  # blank screen
         echo "This script will install \"Curses\" and \"Term::Animation\", if needed."
         echo "Afterwards, \"ASCIIQuarium\" will be installed."
         echo
         echo -n "Do you wish to continue? (y/N): "
         read ANS
         #
         # Yes, Install ASCIIQuarium.
         if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
            clear  # blank screen
            echo "This script will automatically download and install \"Curses\"."
            echo
            # Check if Curses is installed as a prerequisite.
            APP_NAME="libcurses-perl"
            f_application_install
            if [ "$ERROR" != "0" ] ; then
               # Failure to install Curses.
               echo
               echo "Installation of \"Curses\" failed."
               echo " Skipping installation of \"Term::Animation\" and \"ASCIIQuarium\"."
               echo
               echo -n "Press \"Enter\" key to continue."
               read X
               unset X  # Throw out this variable.
               #
               # Do not install ASCIIQuarium.
               MENU_ITEM_NAME="" # Null so f_application_run does not try to run asciiquarium
                                 # when it's not installed.
               APP_NAME=""       # Also prevents checking for Quit Clause.
            else
               # Success at installing Curses.
               echo
               echo "Installation of \"Curses\" is successful."
               echo
               echo -n "Press \"Enter\" key to continue."
               read X
               unset X  # Throw out this variable.
               # Check if Term::Animation is installed as a prerequisite.
               if [ ! -r "/usr/local/bin/term-animation" ] ; then
                  # Term::Animation not installed, install Term::Animation.
                  f_install_term-animation
               fi
               #
               # Since dependencies are installed, now install ASCIIQuarium.
               f_install2_asciiquarium
               #
               # Since dependent packages may have been installed causing
               # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
               # original name along with APP_NAME_INSTALL for web install.
               #
               # Set APP_NAME to correct name for f_application_run.
               APP_NAME="asciiquarium"
               #
               # Set APP_NAME_INSTALL for f_application_web_install.
               APP_NAME_INSTALL=$APP_NAME
            fi
         else
            # No, Do not install ASCIIQuarium.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run asciiquarium
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
         fi
         unset ANS # Throw out this variable.
      fi
} # End of function f_install_asciiquarium
#
# +----------------------------------------+
# |     Function f_install2_asciiquarium   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR.
#
f_install2_asciiquarium () {
      clear  # blank screen
      echo "This script will automatically download and install \"ASCIIQuarium\"."
      echo "The application itself is a single perl script so perl is a prerequisite."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"asciiquarium\" by using wget from:"
      echo "   \"http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz\"."
      echo "3. Decompress and create the installation subdirectory ~/bin/asciiquarium*"
      echo "4. Copy asciiquarium to /usr/local/bin directory."
      echo "5. Allow users to run asciiquarium by setting permissions to r-x or 755."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "asciiaquarium" from robobunny.com by using wget.
      wget http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/asciiquarium
      tar -xvzf asciiquarium.tar.gz
      cd ~/bin/asciiquarium*/
      #
      # 4. Copy asciiquarium to /usr/local/bin directory.
      if [ ! -d "/usr/local/bin" ] ; then
         # Target directory is missing, so create it.
	 sudo mkdir -p /usr/local/bin
      fi
      sudo cp ~/bin/asciiquarium*/asciiquarium /usr/local/bin/
      #
      # 5. Allow users to run asciiquarium by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/asciiquarium
      ERROR=$? # Save error flag condition.
      #
      # 6. Add directory /usr/local/bin to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"ASCIIQuarium\"."
      echo
      echo "To run \"ASCIIQuarium\", select it on the \"Screen-saver Games Menu\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_asciiquarium
#
# +----------------------------------------+
# |         Function f_install_bsod        |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, APP_NAME, MENU_ITEM (both set to null).
#
f_install_bsod () {
      if [ ! -r "/usr/local/bin/bsod" ] ; then
         clear  # blank screen
         echo "This script will install bsod without using a software package manager."
         echo
         echo "If you wish to de-install bsod, you will have to delete files manually"
         echo "by typing: \"sudo rm /usr/local/bin/bsod\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"bosd\" will be installed."
         echo
         echo -n "Do you wish to continue? (y/N): "
         read ANS
         #
         # Yes, Install bsod.
         if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_install_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install bsod.
               f_install2_bsod
               #
               # Since dependent packages may have been installed causing
               # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
               # original name along with APP_NAME_INSTALL for web install.
               #
               # Set APP_NAME to correct name for f_application_run.
               APP_NAME="bsod"
               #
               # Set APP_NAME_INSTALL for f_application_web_install.
               APP_NAME_INSTALL=$APP_NAME
            fi
         else
            # No, Do not install bsod.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run bsod.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS # Throw out this variable.
      fi
} # End of function f_install_bsod
#
# +----------------------------------------+
# |         Function f_install2_bsod       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR.
#
f_install2_bsod () {
      clear  # blank screen
      echo "This script will automatically download and install \"bsod\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"bsod\" by using wget from:"
      echo "   \"http://www.vanheusden.com/bsod/bsod-0.1.tgz\"."
      echo "3. Decompress and create the installation subdirectory ~/bin/bsod*"
      echo "4. Install bsod via:"
      echo "                           sudo make install"
      echo
      echo "5. Copy \"bsod\" to /usr/local/bin directory."
      echo "6. Allow users to run \"bsod\" by setting permissions to r-x or 755."
      echo "7. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "bsod" from .com by using wget.
      wget http://www.vanheusden.com/bsod/bsod-0.1.tgz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/bsod
      tar -xvzf bsod-0.1.tgz
      cd ~/bin/bsod*/
      #
      # 4. If needed, create /usr/local/bin directory.
      if [ ! -d "/usr/local/bin" ] ; then
         # Target directory is missing, so create it.
	 sudo mkdir -p /usr/local/bin
      fi
      # 5. Make and install bsod.
      sudo make install
      #
      # 5. Allow users to run bsod by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/bsod
      ERROR=$? # Save error flag condition.
      #
      # 6. Add directory /usr/local/bin to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"bsod\"."
      echo
      echo "To run \"bsod\", select it on the \"Screen-saver Games Menu\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_bsod
#
# +----------------------------------------+
# |       Function f_install_cclock        |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: ANS.
# Outputs: ERROR.
#
f_install_cclock () {
      if [ ! -r "/usr/bin/cclock" ] ; then
         clear  # blank screen
         echo "This script will install \"cclock\" without using a software package manager."
         echo
         echo "If you wish to de-install \"'cclock\", you will have to delete files manually"
         echo "by typing: \"sudo rm /usr/bin/cclock /usr/share/man/man1/cclock.1\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"cclock\" will be installed."
         echo
         echo -n "Do you wish to continue? (y/N): "
         read ANS
         #
         # Yes, Install cclock.
         if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_install_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install cclock.
               f_install2_cclock
               #
               # Since dependent packages may have been installed causing
               # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
               # original name along with APP_NAME_INSTALL for web install.
               #
               # Set APP_NAME to correct name for f_application_run.
               APP_NAME="cclock"
               #
               # Set APP_NAME_INSTALL for f_application_web_install.
               APP_NAME_INSTALL=$APP_NAME
            fi
         else
            # No, Do not install cclock.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run cclock.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS
      fi
} # End of f_install_cclock
#
# +----------------------------------------+
# |         Function f_install2_cclock     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: X
# Outputs: ERROR.
#
f_install2_cclock () {
      clear  # blank screen
      echo "This script will automatically download and install \"cclock\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"cclock\" by using wget from:"
      echo "   \"http://sourceforge.net/projects/cclock/files/latest/download/cclock-0.96.tar.bz2\"."
      echo "3. Decompress and create the installation subdirectory ~/bin/cclock*"
      echo "4. Install cclock via:"
      echo "                           sudo make install"
      echo
      echo "   Installs files to \"/usr/bin/\" and \"/usr/share/man/man1/cclock.1\"."
      echo
      echo "5. Allow users to run cclock by setting permissions to r-x or 755."
      echo "6. Add directory \"/usr/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      # 
      # 2. Download "cclock" from "http://sourceforge.net/projects/cclock/files/latest/download"
      #    by using wget.
      cd ~/bin
      wget http://sourceforge.net/projects/cclock/files/latest/download/cclock-0.96.tar.bz2
      #
      # 3. Decompress and create the installation subdirectory ~/bin/cclock*.
      tar -xf cclock*
      #
      # 4. Make and install cclock.
      cd ~/bin/cclock*
      sudo make install
      #
      # 5. Allow users to run cclock by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/bin/cclock*
      ERROR=$? # Save error flag condition.
      #
      # 6. Add directory \"/usr/bin\" to your PATH command in ~/.bashrc.
      # Is the directory /usr/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"cclock\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_cclock
#
# +----------------------------------------+
# |       Function f_install_galaxis       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_galaxis () {
      clear  # blank screen
      echo "galaxis - Rescue 4 lifeboats from a crippled interstellar liner."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin/galaxis folder, creating it as necessary."
      echo "2. Download \"galaxis\" using wget from the author's web page."
      echo "    \"http://www.catb.org/~esr/galaxis/galaxis-1.9.tar.gz\""
      echo "3. Decompress and extract \"galaxis.c\" from the *.tgz file."
      echo "4. Compile the C source code to create the \"galaxis\" file."
      echo "5. Copy \"galaxis\" to \"/usr/local/bin\" directory."
      echo "6. Copy \"galaxis\" to "/usr/local/bin" directory."
      echo "7. Allow users to run \"galaxis\" by setting permissions to r-x or 755."
      echo "8. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install galaxis.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your ~/bin/trek73c folder.
         cd ~
         if [ ! -d "~/bin" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin
         fi
         #
         if [ ! -d "~/bin/galaxis" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin/galaxis
         fi
         #
         cd ~/bin/galaxis
         # 
         # 2. Download "galaxis" using wget from the author's web page.
         wget http://www.catb.org/~esr/galaxis/galaxis-1.9.tar.gz
         #
         # 3. Decompress and extract "galaxis.c", "Makefile", etc. from the *.tar.gz file."
         tar -xvf galaxis-1.9.tar.gz
         #
         cd galaxis-
         #
         # 4. Compile the C source code to create the galaxis file.
         make galaxis
         #
         # 5. Copy \"galaxis\" to "/usr/local/bin" directory.
         sudo cp ~/bin/galaxis/galaxis-/galaxis /usr/local/bin/
         #
         # 6. Compress and copy man pages for galaxis to "usr/share/man/man6" directory
         gzip ~/bin/galaxis/galaxis-/galaxis.6
         #
         if [ -r ~/bin/galaxis/galaxis-/galaxis.6.gz ] ; then
            sudo cp ~/bin/galaxis/galaxis-/galaxis.6.gz /usr/share/man/man6/
         else
            sudo cp ~/bin/galaxis/galaxis-/galaxis.6 /usr/share/man/man6/
         fi
         #
         # 7.  Allow users to run galaxis by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/galaxis
         ERROR=$? # Save error flag condition.
         #
         # 8. Add directory "/usr/local/bin" to your PATH command in ~/.bashrc.
         #    Is the directory /usr/local/bin in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "-------------------------------------------------------------"
         echo "Finished running installation script for \"galaxis\"."
         echo "-------------------------------------------------------------"
         echo
         echo "To run \"galaxis\", select it on the \"Arcade Games Menu\"."
         echo
         echo "IMPORTANT: For instructions on playing, type \"?\" while playing the game."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Since dependent packages may have been installed causing
         # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
         # original name along with APP_NAME_INSTALL for web install.
         #
         # Set APP_NAME to correct name for f_application_run.
         APP_NAME="galaxis"
         #
         # Set APP_NAME_INSTALL for f_application_web_install.
         APP_NAME_INSTALL=$APP_NAME
      else
         # No, Do not install galaxis.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_galaxis
#
# +----------------------------------------+
# |        Function f_install_gnuski       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_gnuski () {
      clear  # blank screen
      echo "gnuski - A down-hill skiing game using Curses."
      echo "(c) 2001, 2013 Thomas Munro"
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"gnuski\" using wget from the author's web page."
      echo "\http://sourceforge.net/projects/gnuski/files/latest/download\""
      echo "3. Decompress and create the installation subdirectory ~/bin/gnuski"
      echo "4. Install ncurses if needed."
      echo "5. Compile the C source code to create the \"gnuski\" file."
      echo "6. Copy \"gnuski\" to \"/usr/local/bin\" directory."
      echo "7. Allow users to run \"gnuski\" by setting permissions to r-x or 755."
      echo "8. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install gnuski.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # Install libncurses-dev and ncurses-dev as pre-requisites.
         f_install_ncurses
         if [ "$ERROR" = "0" ] ; then
            # Error code 1 $?=1 means no --help available.
            # Error code 0 (zero) where $?=0 means no error.
            #
            # 1. Change directory to your ~/bin/gnuski folder.
            cd ~
            if [ ! -d "~/bin" ] ; then
               # Target directory is missing, so create it.
               mkdir ~/bin
            fi
            #
            if [ ! -d "~/bin/gnuski" ] ; then
               # Target directory is missing, so create it.
               mkdir ~/bin/gnuski
            fi
            #
            cd ~/bin/gnuski
            # 
            # 2. Download "gnuski" using wget from the author's web page.
            wget http://downloads.sourceforge.net/project/gnuski/gnuski/gnuski-0.3/gnuski-0.3.tar.gz
            #

            # 3. Decompress gnuski-master.zip
            tar -xvf gnuski-0.3.tar.gz
            #
            # 3. Compile the C source code to create the gnuski file.
            cd gnuski
            make
            #
            # 4. Move "gnuski" to "/usr/local/bin" directory.
            sudo cp gnuski /usr/local/bin/
            #
            # 5.  Allow users to run "gnuski" by setting permissions to r-x or 755.
            sudo chmod 755 /usr/local/bin/gnuski
            ERROR=$? # Save error flag condition.
            #
            # 6. Add directory "/usr/local/bin" to your PATH command in ~/.bashrc.
            #    Is the directory "/usr/local/bin" in your PATH of directories?
            #    Check the $PATH
            if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
               echo "If needed, edit file \"~/.bashrc\" PATH."
               echo "Append the directory name to your environment $PATH."
               echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
               echo "export PATH"
               echo
               echo "       >>> IMPORTANT <<<"
               echo "After editing the file, .bashrc:"
               echo "Close Terminal for changes to take effect."
               echo "Either logout or exit from Terminal and re-launch Terminal."
               echo
            fi
            echo
            echo "------------------------------------------------------"
            echo "Finished running installation script for \"gnuski\"."
            echo "------------------------------------------------------"
            echo
            echo "To run \"gnuski\", select it on the \"Arcade Games Menu\"."
            echo
            echo -n "Press \"Enter\" key to continue."
            read X
            unset X  # Throw out this variable.
            #
            # Since dependent packages may have been installed causing
            # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
            # original name along with APP_NAME_INSTALL for web install.
            #
            # Set APP_NAME to correct name for f_application_run.
            APP_NAME="gnuski"
            #
            # Set APP_NAME_INSTALL for f_application_web_install.
            APP_NAME_INSTALL=$APP_NAME
            #
         fi
      else
         # No, Do not install gnuski.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_gnuski
#
# +----------------------------------------+
# |          Function f_install_sst        |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_sst () {
      clear  # blank screen
      echo "sst - Super Star Trek"
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin/sst folder, creating it as necessary."
      echo "2. Download \"sst\" using wget from the author's web page."
      echo "   \"http://www.almy.us/files/sstlinux.tar.gz\""
      echo "3. Decompress and extract \"sst\" and \"sst.doc\" from the *.tar.gz file."
      echo "4. Move \"sst\" to \"/usr/local/bin\" directory."
      echo "5. Allow users to run \"sst\" by setting permissions to r-x or 755."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install "sst".
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your ~/bin/sst folder.
         cd ~
         if [ ! -d "~/bin" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin
         fi
         #
         if [ ! -d "~/bin/sst" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin/sst
         fi
         #
         cd ~/bin/sst
         # 
         #
         # 2. Download "sst" using wget from the author's web page.
         wget http://www.almy.us/files/sstlinux.tar.gz
         #
         # 3. Decompress and extract "sst" and "sst.doc" from the *.tar.gz file.
         tar -xvf sstlinux.tar.gz
         #
         # 4. Move "sst" to "/usr/local/bin" directory.
         sudo cp sst /usr/local/bin/
         #
         # 5.  Allow users to run "sst" by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/sst
         ERROR=$? # Save error flag condition.
         #
         # 6. Add directory "/usr/local/bin" to your PATH command in ~/.bashrc.
         #    Is the directory "/usr/local/bin" in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "-------------------------------------------------"
         echo "Finished running installation script for \"sst\"."
         echo "-------------------------------------------------"
         echo
         echo "To run \"sst\", select it on the \"Simulation Games and Animation Menu\"."
         echo
         echo "For instructions on playing:"
         echo "Read the \"sst.doc\" file in your \"~/bin/sst\" directory."
         echo
         echo "While playing the game, for help type '?' at the COMMAND> prompt."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Since dependent packages may have been installed causing
         # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
         # original name along with APP_NAME_INSTALL for web install.
         #
         # Set APP_NAME to correct name for f_application_run.
         APP_NAME="sst"
         #
         # Set APP_NAME_INSTALL for f_application_web_install.
         APP_NAME_INSTALL=$APP_NAME
      else
         # No, Do not install sst.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_sst
#
# +----------------------------------------+
# |       Function f_install_startrek      |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_startrek () {
      clear  # blank screen
      echo "--------------------------------------------------------------------------"
      echo "Programmer's note: I could not get this C-language source code to compile."
      echo "                   Hopefully you can compile it."
      echo "--------------------------------------------------------------------------"
      echo
      echo "startrek - Super Star Trek Classic (v1.1) ported to C by Chris Nystrom"
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin/startrek folder, creating it as necessary."
      echo "2. Download \"startrek.c\" source code using wget from the author's web page."
      echo "   \"http://www.dunnington.u-net.com/public/startrek/startrek.c\""
      echo "3. Compile the C source code to create the \"startrek\" file."
      echo "4. Copy \"startrek\" to \"/usr/local/bin\" directory."
      echo "5. Allow users to run \"startrek\" by setting permissions to r-x or 755."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install startrek.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your ~/bin/startrek folder.
         cd ~
         if [ ! -d "~/bin" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin
         fi
         #
         if [ ! -d "~/bin/startrek" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin/startrek
         fi
         #
         cd ~/bin/startrek
         # 
         # 2. Download "startrek.c" using wget from the author's web page.
         wget http://www.dunnington.u-net.com/public/startrek/startrek.c
         #
         # 3. Compile the C source code to create the startrek file.
         gcc -Wall -W -Werror startrek.c -o startrek
         # or make startrek
         #
         # 4. Move "startrek" to "/usr/local/bin" directory.
         sudo cp ~/startrek /usr/local/bin/
         #
         # 5.  Allow users to run "startrek" by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/startrek
         ERROR=$? # Save error flag condition.
         #
         # 6. Add directory "/usr/local/bin" to your PATH command in ~/.bashrc.
         #    Is the directory "/usr/local/bin" in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "------------------------------------------------------"
         echo "Finished running installation script for \"startrek\"."
         echo "------------------------------------------------------"
         echo
         echo "To run \"startrek\", select it on the \"Simulation Games and Animation Menu\"."
         echo
         echo "IMPORTANT: For instructions on playing, type \"-\" while playing the game."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Since dependent packages may have been installed causing
         # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
         # original name along with APP_NAME_INSTALL for web install.
         #
         # Set APP_NAME to correct name for f_application_run.
         APP_NAME="startrek"
         #
         # Set APP_NAME_INSTALL for f_application_web_install.
         APP_NAME_INSTALL=$APP_NAME
         #
      else
         # No, Do not install startrek.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_startrek
#
# +----------------------------------------+
# |    Function f_install_term-animation   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR.
#
f_install_term-animation () {
      clear  # blank screen
      echo "This script will automatically download and install \"Term::Animation\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"Term::Animation\" by using wget from:"
      echo "   \"http:=//search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz\"."
      echo "3. Decompress and create the installation subdirectory ~/Term-Animation*"
      echo "4. Install Term::Animation via:"
      echo "                                 perl Makefile.PL"
      echo "                                 make"
      echo "                                 make test"
      echo "                                 make install"
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "Term::Animation" from:
      #    http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz
      # by using wget.
      wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/Term-Animation*
      tar -xvzf Term-Animation-2.6.tar.gz
      cd Term-Animation-2.6
      #
      # 4. Install Term::Animation via "perl Makefile.PL", "make", "make test", "make install".
      perl Makefile.PL
      make
      make test
      sudo make install
      ERROR=$? # Save error flag condition.
      echo
      echo "Finished running installation script for \"Term::Animation\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install_term-animation
#
# +----------------------------------------+
# |       Function f_install_textmaze      |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_textmaze () {
      if [ ! -r "/usr/local/bin/textmaze" ] ; then
         clear  # blank screen
         echo "Textmaze - a playable maze drawn on-screen."
         echo
         echo "This script will do the following:"
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"TextMaze\" will be installed."
         echo
         echo -n "Do you wish to continue? (y/N): "
         read ANS
         #
         # Yes, Install TextMaze.
         if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_install_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install TextMaze.
               f_install2_textmaze
               #
               # Since dependent packages may have been installed causing
               # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
               # original name along with APP_NAME_INSTALL for web install.
               #
               # Set APP_NAME to correct name for f_application_run.
               APP_NAME="textmaze"
               #
               # Set APP_NAME_INSTALL for f_application_web_install.
               APP_NAME_INSTALL=$APP_NAME
            fi
         else
            # No, Do not install TextMaze.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run textmaze.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS
      fi
} # End of function f_install_textmaze
#
# +----------------------------------------+
# |       Function f_install2_textmaze     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: X.
# Outputs: ERROR.
#
f_install2_textmaze () {
      clear  # blank screen
      echo "This script will automatically download and install \"TextMaze\"."
      echo "The application itself is a single perl script so perl is a prerequisite."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"TextMaze\" by using wget from:"
      echo "   \"http://robobunny.com/projects/textmaze\textmaze.tar.gz.\"."
      echo "3. Decompress and create the installation subdirectory ~/bin/TextMaze*"
      echo "4. Substitute line of textmaze to indicate the correct perl evironment."
      echo "5. Copy \"textmaze\" to \"/usr/local/bin\" directory."
      echo "6. Allow users to run textmaze by setting permissions to r-x or 755."
      echo "7. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "textmaze" from robobunny.com by using wget.
      wget http://robobunny.com/projects/textmaze/textmaze.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/TextMaze
      tar -xvzf textmaze.tar.gz
      cd ~/bin/TextMaze*/
      #
      # 4. Substitute line for proper perl environment.
      #    Change from <old-string>: "#!/usr/local/bin/perl"
      #    Change   to <new-string>: "#!/usr/bin/env perl"
      #    sed -i "s|<old-string>|<new-string>|" <target filename>
      sed -i "s|#!/usr/local/bin/perl|#!/usr/bin/env perl|" textmaze
      #
      # 5. Copy TextMaze to /usr/local/bin directory.
      if [ ! -d "/usr/local/bin" ] ; then
         # Target directory is missing, so create it.
	 sudo mkdir -p /usr/local/bin
      fi
      sudo cp ~/bin/TextMaze*/textmaze /usr/local/bin/
      #
      # 6. Allow users to run TextMaze by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/textmaze
      ERROR=$? # Save error flag condition.
      #
      # 7. Add directory /usr/local/bin to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"TextMaze\"."
      echo
      echo "To run \"TextMaze\", select it on the \"Puzzle Games Menu\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of f_install2_textmaze
#
# +----------------------------------------+
# |         Function f_install_trekx       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, MENU_ITEM_NAME, APPNAME, APP_NAME_INSTALL, PRESS_KEY.
#
f_install_trekx () {
      clear  # blank screen
      echo "trekx - Trek 73 a Star Trek game from 1973"
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin/trek73 folder, creating it as necessary."
      echo "2. Download \"trekx\" using wget from the author's web page."
      echo "   \"http://highlandsun.com/hyc/trek73c.tgz\""
      echo "3. Decompress and extract \"trekx.c\", \"Makefile\", and \"Makefile.O\" from the *.tgz file."
      echo "4. Compile the C source code to create the \"trekx\" file."
      echo "5. Copy \"trekx\" to \"/usr/local/bin\" directory."
      echo "6. Allow users to run \"trekx\" by setting permissions to r-x or 755."
      echo "7. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Do you wish to continue? (y/N): "
      read ANS
      #
      # Yes, Install trekx.
      if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
         #
         # 1. Change directory to your ~/bin/trek73c folder.
         cd ~
         if [ ! -d "~/bin" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin
         fi
         #
         if [ ! -d "~/bin/trek73c" ] ; then
            # Target directory is missing, so create it.
            mkdir ~/bin/trek73c
         fi
         #
         cd ~/bin/trek73c
         # 
         # 2. Download "trekx" using wget from the author's web page.
         wget http://highlandsun.com/hyc/trek73c.tgz
         #
         # 3. Decompress and extract "trekx.c", "Makefile" and "Makefile.O" from the *.tgz file."
         tar -xvf trek73c.tgz
         #
         # 4. Compile the C source code to create the trekx file.
         make trekx
         #
         # 4. Move "trekx" to "/usr/local/bin" directory.
         sudo cp ~/bin/trek73c/trekx /usr/local/bin/
         #
         # 5.  Allow users to run trekx by setting permissions to r-x or 755.
         sudo chmod 755 /usr/local/bin/trekx
         ERROR=$? # Save error flag condition.
         #
         # 6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc.
         #    Is the directory /usr/local/bin in your PATH of directories?
         #    Check the $PATH
         if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
            echo "If needed, edit file \"~/.bashrc\" PATH."
            echo "Append the directory name to your environment $PATH."
            echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
            echo "export PATH"
            echo
            echo "       >>> IMPORTANT <<<"
            echo "After editing the file, .bashrc:"
            echo "Close Terminal for changes to take effect."
            echo "Either logout or exit from Terminal and re-launch Terminal."
            echo
         fi
         echo
         echo "-------------------------------------------------------------"
         echo "Finished running installation script for \"trekx\" (Trek 73)."
         echo "-------------------------------------------------------------"
         echo
         echo "To run \"trekx\", select it on the \"Simulation Games and Animation Menu\"."
         echo
         echo "IMPORTANT: For instructions on playing, type \"-\" while playing the game."
         echo
         echo -n "Press \"Enter\" key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Since dependent packages may have been installed causing
         # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
         # original name along with APP_NAME_INSTALL for web install.
         #
         # Set APP_NAME to correct name for f_application_run.
         APP_NAME="trekx"
         #
         # Set APP_NAME_INSTALL for f_application_web_install.
         APP_NAME_INSTALL=$APP_NAME
      else
         # No, Do not install trekx.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run sst.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
         PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
      fi
      unset ANS
} # End of function f_install_trekx
#
# +----------------------------------------+
# |       Function f_install_xorcurses     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, APP_NAME, MENU_ITEM (both set to null).
#
f_install_xorcurses () {
      if [ ! -r "/usr/local/share/XorCurses" ] ; then
         clear  # blank screen
         echo "This script will install XorCurses without using a software package manager."
         echo
         echo "If you wish to de-install XorCurses, you will have to delete files manually"
         echo "by typing: \"sudo rm -r /usr/local/bin/ /usr/local/share/XorCurses\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"XorCurses\" will be installed."
         echo
         echo -n "Do you wish to continue? (y/N): "
         read ANS
         #
         # Yes, Install XorCurses.
         if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_install_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install XorCurses.
               f_install2_xorcurses
               #
               # Since dependent packages may have been installed causing
               # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
               # original name along with APP_NAME_INSTALL for web install.
               #
               # Set APP_NAME to correct name for f_application_run.
               APP_NAME="xorcurses"
               #
               # Set APP_NAME_INSTALL for f_application_web_install.
               APP_NAME_INSTALL=$APP_NAME
            fi
         else
            # No, Do not install XorCurses.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run XorCurses.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS  # Throw out this variable.
      fi
} # End of function f_install_xorcurses
#
# +----------------------------------------+
# |       Function f_install2_xorcurses    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, APP_NAME, MENU_ITEM (both set to null).
#
f_install2_xorcurses () {
      clear  # blank screen
      echo "This script will automatically download and install \"XorCurses\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"XorCurses\" using wget from:"
      echo "   http://jwm-art.net/art/archive"
      echo "3. Decompress and create the installation subdirectory ~/bin/xorcurses*"
      echo "4. Install XorCurses via:"
      echo "                           make"
      echo "                           sudo make install"
      echo
      echo "   Installs files to /usr/local/bin/ and /usr/local/share/XorCurses."
      echo
      echo "5. Allow users to run XorCurses by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      # 
      # 2. Download "XorCurses" from "http://jwm-art.net/art/archive" by using wget.
      wget http://jwm-art.net/art/archive/XorCurses-0.2.2.tar.bz2
      #
      # 3. Decompress and create the installation subdirectory ~/bin/xorcurses*.
      tar -xf XorCurses-0.2.2.tar.bz2
      cd ~/bin/XorCurses-0.2.2
      #
      # 4. Make and install XorCurses.
      make
      sudo make install
      # 
      # 5. Allow users to run XorCurses by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/xorcurses
      ERROR=$? # Save error flag condition.
      #
      # 6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"XorCurses\"."
      echo
      echo "To run \"XorCurses\", select it on the \"Arcade Games Menu\" or \"Board Games Menu\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_xorcurses
#
# +----------------------------------------+
# |        Function f_install_ztrack       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, APP_NAME, MENU_ITEM (both set to null).
#
f_install_ztrack () {
      if [ ! -r "/usr/games/ztrack" ] ; then
         clear  # blank screen
         echo "This script will install Ztrack without using a software package manager."
         echo
         echo "If you wish to de-install Ztrack, you will have to delete files manually"
         echo "by typing: \"sudo rm /usr/games/ztrack\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"Ztrack\" will be installed."
         echo
         echo -n "Do you wish to continue? (y/N): "
         read ANS
         #
         # Yes, Install Ztrack.
         if [ "$ANS" = "Y" ] || [ "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_install_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install Ztrack.
               f_install2_ztrack
               #
               # Since dependent packages may have been installed causing
               # changes in APP_NAME/APP_NAME_INSTALL, set APP_NAME to the 
               # original name along with APP_NAME_INSTALL for web install.
               #
               # Set APP_NAME to correct name for f_application_run.
               APP_NAME="ztrack"
               #
               # Set APP_NAME_INSTALL for f_application_web_install.
               APP_NAME_INSTALL=$APP_NAME
            fi
         else
            # No, Do not install Ztrack.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run Ztrack.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS  # Throw out this variable.
      fi
} # End of function f_install_ztrack
#
# +----------------------------------------+
# |         Function f_install2_ztrack     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: ERROR, APP_NAME, MENU_ITEM (both set to null).
#
f_install2_ztrack () {
      clear  # blank screen
      echo "This script will automatically download and install \"Ztrack\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your ~/bin folder, creating it as necessary."
      echo "2. Download \"Ztrack\" using wget from:"
      echo "   http://www.ibiblio.org/pub/Linux/games/arcade"
      echo "3. Decompress and create the installation subdirectory ~/bin/ztrack*"
      echo "4. Install Ztrack via:"
      echo "                           make"
      echo "                           sudo make install"
      echo
      echo "   Installs files to /usr/local/bin/."
      echo
      echo "5. Allow users to run Ztrack by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your ~/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      # 
      # 2. Download "Ztrack" from "http://www.ibiblio.org/pub/Linux/games/arcade/ztrack-1.0.tar.gz" by using wget.
      cd ~/bin
      wget http://www.ibiblio.org/pub/Linux/games/arcade/ztrack-1.0.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/ztrack*.
      tar -xf ztrack-1.0.tar.gz
      #
      # 4. Make and install Ztrack.
      cd ~/bin/ztrack*
      make
      sudo make install
      #
      # 5. Allow users to run Ztrack by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/games/ztrack*
      ERROR=$? # Save error flag condition.
      #
      # 6. Add directory \"/usr/games\" to your PATH command in ~/.bashrc.
      # Is the directory /usr/games in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/games"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/games"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"Ztrack\"."
      echo
      echo "To run \"Ztrack\", select it on the \"Arcade Games Menu\" or \"Simulation Games\"."
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_ztrack
#
# +----------------------------------------+
# |         Function f_asciiportal         |
# +----------------------------------------+
#
f_asciiportal () {
      APP_NAME="asciiportal"
      clear # Blank the screen.
      echo "asciiportal - Inspired by Increpare's Portile game ."
      echo
      echo "Within the game you can use the following keys to play:"
      echo "Left/Right Arrows . Move Left/Right"
      echo "Up/Down Arrows .... Move Up/Down Ladders"
      echo "                    or adjust aim."
      echo "Number Pad Keys ... Quick Aim."
      echo "Z/0 ............... Fire Blue Portal"
      echo "X/PERIOD .......... Fire Yellow Portal"
      echo "SPACE/5 ........... Fire 'Next' Portal"
      echo "C ................. Clear Portals"
      echo
      echo "ESC/F1 ............ Menu"
      echo "P ................. In-game Pause"
      echo "F2 ................ Change Portal Render"
      echo "F3 ................ Set to Default Speed"
      echo "+ ................. Increase Game Speed"
      echo "- ................. Decrease Game Speed"
      echo "R ................. Restart Level"
      echo "M ................. Mute/Unmute music"
      echo "? ................. This menu"
      f_press_enter_key_to_continue
} # End of f_asciiportal
#
# +----------------------------------------+
# |            Function f_atom4            |
# +----------------------------------------+
#
f_atom4 () {
      APP_NAME="atom4 -mt"
} # End of f_atom4
#
# +----------------------------------------+
# |            Function f_boxes            |
# +----------------------------------------+
#
f_boxes () {
      # If APP_NAME has no spaces, then neither [OPTIONS] nor file name are specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         clear # Blank the screen.
         echo "boxes - takes a text file and surrounds the words with a box design."
         echo
         echo "Usage:" 
         echo "boxes [OPTIONS] file ..."
         echo "-l list all box designs."
         echo "-d <box design> choose design to use."
         echo "-a alignment" 
         echo "   followed by \"hc\" for horizontal centering."
         echo "               \"hl\" for left alignment."
         echo "               \"hr\" for right alignment."
         echo "               \"vc\" for vertical centering."
         echo "               \"vt\" for vertical top."
         echo "               \"vb\" for vertical bottom."
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         echo -n "Enter name of text file to box: "
         read ANS
         if [ -z $ANS ] ; then   #String has zero length.
            clear # Blank the screen.
            echo "Missing filename."
            echo "Usage: box [OPTIONS] <filename>"
            echo
            echo "Example use: \"boxes -d dog -a hc <filename>\"."
         elif [ -r $ANS ] ; then   #Filename exists and is readable.
            APP_NAME="boxes -d dog -a hc $ANS"
            f_application_run
         else
            clear # Blank the screen.
            echo "The file $ANS is either missing or cannot be read."
            echo "Usage: box [OPTIONS] <filename>"
            echo
            echo "Example use: \"boxes -d dog -a hc <filename>\"."
            APP_NAME=-1 # Usually f_application_run sets APP_NAME=-1
                        # for valid menu choices but it's not run here.
                        # If not -1, then f_application_bad_menu_choice
                        # below will consider it a bad choice and will
                        # set PRESS_KEY=0 whereas we need it set to 1.
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
         fi
      fi
      APP_NAME=""
} # End of function f_rev
#
# +----------------------------------------+
# |            Function f_gnubg            |
# +----------------------------------------+
#
f_gnubg () {
      APP_NAME="gnubg -t"
      clear # Blank the screen.
      echo "gnubg - GNU Backgammon."
      echo
      echo "gnubg -t starts backgammon in text mode."
      echo
      echo "At the prompt, type: \"new game\" to start a new game."
      echo "           (No game)  new game"
      echo
      echo "                     \"help\" for playing commands."
      echo
      echo "                     \"q\" or \"quit\" to end game."
      f_press_enter_key_to_continue
} # End of f_gnubg
#
# +----------------------------------------+
# |              Function f_hint           |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: None.
# Outputs: None.
#
f_hint () {
      clear  # blank screen
      echo "To use as a screensaver with an inactivity time-out:"
      echo
      echo "1. Install application \"screen\" (under System Category Menu/Screens Menu)."
      echo
      echo "2. Create file \"~/.screenrc\ in your home directory."
      echo
      echo "   File \"~/.screenrc\" should contain the following lines:"
      echo
      echo "        blankerprg $APP_NAME"
      echo "        idle 120 blanker"
      echo
      echo "   Where \"idle 120\" is the number of seconds of inactivity time-out."
      echo "   You can change it from 120 to any number of seconds you want."
      echo
      echo
      # f_press_enter_key_to_continue
} # End of function f_hint
#
# +----------------------------------------+
# |            Function f_netris           |
# +----------------------------------------+
#
f_netris () {
      APP_NAME="netris"
      clear # Blank the screen.
      echo "netris - Tetris-like game."
      echo "Netris version 0.52 (C) 1994-1996,1999  Mark H. Weaver <mhw@netris.org>"
      echo "Usage: netris <options>"
      echo "  -h         Print usage information"
      echo "  -w         Wait for connection"
      echo "  -c <host>  Initiate connection"
      echo "  -p <port>  Set port number (default is 9284)"
      echo "  -k <keys>  Remap keys.  The argument is a prefix of the string"
      echo "               containing the keys in order: left, rotate, right, drop,"
      echo "               down-faster, toggle-spying, pause, faster, redraw, new."
      echo "               \"^\" prefixes controls.  (default is \"jkl mspf^ln\")"
      echo "  -i <sec>   Set the step-down interval, in seconds"
      echo "  -r <robot> Execute <robot> (a command) as a robot controlling"
      echo "               the game instead of the keyboard"
      echo "  -F           Use fair robot interface"
      echo "  -s <seed>	Start with given random seed"
      echo "  -D        Drops go into drop mode"
      echo "              This means that sliding off a cliff after a drop causes"
      echo "              another drop automatically"
      echo "  -S        Disable inverse/bold/color for slow terminals"
      echo "  -C        Disable color"
      echo "  -H        Show distribution and warranty information"
      echo "  -R        Show rules"
      echo
      f_run_and_exit "netris" "netris"
} # End of f_netris
#
# +----------------------------------------+
# |            Function f_pente            |
# +----------------------------------------+
#
f_pente () {
      clear # Blank the screen.
      echo "   Pente 2.2.5 by William Shubert - 31 July 2001"
      echo
      echo "    -version,--version Print version information"
      echo "            -showthink Show computer thinking"
      echo
      echo "  Display type options:"
      echo "     -[no]X11,-[no]x11 X11"
      echo "           -[no]curses Curses"
      echo "             -[no]text Plain text"
      echo
      echo "  X11 Switches:"
      echo "                 -name Name to use for X resource database"
      echo "               -adfile Set name of ad file"
      echo "           -[no]iconic Start up as an icon"
      echo "             -geometry Starting geometry"
      echo "             -icongeom Icon geometry"
      echo "              -display Display to use"
      echo "            -[no]color Use color if possible"
      echo "          -[no]stealth Stealth mode"
      echo "             -language Language"
      echo "               -volume Sound volume, 0..100"
      echo "               -silent Same as \"-volume 0\""
      echo
      echo "          -help,--help Show this message"
      APP_NAME="pente -curses"
} # End of f_pente
#
# +----------------------------------------+
# |             Function f_rev             |
# +----------------------------------------+
#
f_rev () {
      # If APP_NAME has no spaces, then neither [OPTIONS] nor file name are specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         clear # Blank the screen.
         echo "rev - takes a text file or standard input (keyboard) and reverses the words."
         echo
         echo "Usage:" 
         echo "rev [-V] [-h] file ..."
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         echo -n "Enter name of text file to reverse: "
         read ANS
         if [ -z $ANS ] ; then   #String has zero length.
            clear # Blank the screen.
            echo "Missing filename."
            echo "Usage: rev <filename>"
            echo
            echo "Since no filename, now run 'rev' in interactive mode."
            echo
            echo "Interactive usage:"
            echo "Now type the word(s) or sentence to reverse."
            echo
            f_how_to_quit_application "<Ctrl>-D" "no-clear"
            APP_NAME="rev"
            f_application_run
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         elif [ -r $ANS ] ; then   #Filename exists and is readable.
            APP_NAME="rev $ANS"
            f_application_run
         else
            echo "The file $ANS is either missing or cannot be read."
            APP_NAME=-1 # Usually f_application_run sets APP_NAME=-1
                        # for valid menu choices but it's not run here.
                        # If not -1, then f_application_bad_menu_choice
                        # below will consider it a bad choice and will
                        # set PRESS_KEY=0 whereas we need it set to 1.
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
         fi
      fi
      APP_NAME=""
} # End of function f_rev
#
# +----------------------------------------+
# |               Function f_sst           |
# +----------------------------------------+
f_sst () {      clear # Blank the screen.
      echo "sst - Super Star Trek."
      echo
      echo "For instructions while playing the game:"
      echo "Type a '?' at the 'COMMAND>' prompt."
      echo 
      echo "COMMAND> ?"
      echo "UNRECOGNIZED COMMAND. LEGAL COMMANDS ARE:"
      echo "   SRSCAN    MOVE      PHASERS   CALL"
      echo "   STATUS    IMPULSE   PHOTONS   ABANDON"
      echo "   LRSCAN    WARP      SHIELDS   DESTRUCT"
      echo "   CHART     REST      DOCK      QUIT"
      echo "   DAMAGES   REPORT    SENSORS   ORBIT"
      echo "   TRANSPORT MINE      CRYSTALS  SHUTTLE"
      echo "   PLANETS   REQUEST   DEATHRAY  FREEZE"
      echo "   COMPUTER  EMEXIT    PROBE     COMMANDS"
      echo "   HELP"
      echo
      echo "To quit game:"
      echo "COMMAND> QUIT"
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
}  #End of function f_sst
#
# +----------------------------------------+
# |           Function f_starwars          |
# +----------------------------------------+
#
f_starwars () {
      clear # Blank the screen.
      echo "Star Wars ASCII Movie"
      echo
      echo The movie is played by running command:
      echo telnet towel.blinkenlights.nl
      echo
      echo If telnet hangs while trying the ip-address,
      echo then re-run this program and try again.
      echo
      f_run_and_exit "Star Wars ASCII Movie" "telnet towel.blinkenlights.nl"
}  #End of function f_starwars
#
# +----------------------------------------+
# |             Function f_trek            |
# +----------------------------------------+
#
f_trek () {
      clear # Blank the screen.
      echo "Trek - Star Trek game included in the package bsdgames."
      echo
      echo "For instructions while playing the game:"
      echo 
      echo "Type a '?' at the 'Command:' prompt."
      echo 
      echo "Command: ?"
      echo "abandon       capture         cloak      computer"
      echo "damages      destruct          dock          help"
      echo "impulse        lrscan          move       phasers"
      echo "    ram          dump          rest        shield"
      echo " srscan        status     terminate       torpedo"
      echo " undock        visual          warp"
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
}  #End of function f_trek
#
# +----------------------------------------+
# |              Function f_trekx          |
# +----------------------------------------+
f_trekx () {      clear # Blank the screen.
      echo "trekx - Super Star Trek."
      echo
      echo "For instructions while playing the game:"
      echo "Type a '-' (dash) at the 'CODE>' prompt."
      echo 
      echo "CODE> -"
      echo "1  Fire Phasers                  q  Lock Phasers"
      echo "2  Fire Photon Torpedoes         w  Lock Tubes"
      echo "3  Anti-Matter Probe Control     e  Alter Power Distribution"
      echo "4  Load/Unload Torpedoes         r  Change Firing Parameters"
      echo "5  Change Course & Speed         t  Alter Display Radius"
      echo "6  Pursue Enemy Vessel           y  Run from Enemy Vessel"
      echo "7  Damage Report                 u  Scan Enemy Vessel"
      echo "8  Self-Destruction              i  Engineering Separation"
      echo "9  Ask Enemy to Surrender        o  Surrender"
      echo "0  Attempt Defenseless Ruse      p  Attempt Corbomite Bluff"
      echo "-  List Commands                 [  Quit Game"
      echo
      echo "To quit game: Type a left square-bracket at the CODE> prompt"
      echo "CODE> ["
      echo
      echo -n "Press \"Enter\" key to continue."
      read X
      unset X  # Throw out this variable.
}  #End of function f_trekx
#
# +----------------------------------------+
# |            Function f_wargames         |
# +----------------------------------------+
#
f_wargames () {
      clear # Blank the screen.
      echo "wargames - Question asked by the WOPR super-computer."
      echo
      echo "From the 1983 movie 'WarGames' starring Matthew Broderick, Ally Sheedy,"
      echo "Dabney Coleman, and John Wood. David (Matthew Broderick) unknowingly hacks into"
      echo "the backdoor of a top-secret U.S. Air Force super-computer."
      echo "The WOPR (War Operation Planned Response) controls the U.S. nuclear arsenal."
      echo
      echo "Notice the computer equipment David uses, the acoustic modem, and floppy drive."
      echo
      echo "WOPR asks this question when David first hacks the backdoor, making David think"
      echo "that it is simply a recreational program."
      echo
      f_press_enter_key_to_continue
} # End of f_wargames
#
