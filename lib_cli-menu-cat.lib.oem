# Â©2017 Copyright 2017 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="December-23-2017 11:15"
#
# +----------------------------------------+
# |     Function f_menu_cat_applications   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: MENU_TITLE.
# Outputs: None.
#
f_menu_cat_applications () {
      MENU_TITLE="Application Categories Menu"
      f_menu_module_display
} # End of function f_menu_cat_applications
#
# +----------------------------------------+
# |      Function f_menu_module_manager    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: MENU_TITLE.
# Outputs: None.
#
f_menu_module_manager () {
      MENU_TITLE="Software Module Manager Menu"
      f_menu_module_display
} # End of function f_menu_module_manager
#
# ******************************************
# *****    Application Modules Menu    *****
# ******************************************
#
#  Inputs: MENU_TITLE.
#    Uses: AAB, THIS_FILE, DELIMITER, MENU_TITLE.
# Outputs: None.
#
f_menu_module_display () {
case $GUI in
     dialog | whiptail)
     if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
        f_menu_module_display_gui $GUI
     else
        f_menu_module_display_txt  # The "Software Module Manager Menu"
                                   # only uses a text menu.
     fi
     ;;
     text)
     f_menu_module_display_txt
     ;;
esac
} # End of function f_menu_module_display
#
# +----------------------------------------+
# |   Function f_menu_module_display_txt   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: AAB, MENU_TITLE, THIS_FILE, DELIMETER.
# Outputs: None.
#
f_menu_module_display_txt () {
      f_initvars_menu_app "AAB"
      until [ "$AAB" = "0" ]
      do    # Start of Application Modules until loop.
            #
            #f_mod_apps_audio_video  #AAB Audio-Video  - Music/Video players, editors, utilities.
            #f_mod_apps_databases    #AAB Databases    - General and specialized databases.
            #f_mod_apps_development  #AAB Development  - Tools to test code and track/report bugs.
            #f_mod_apps_education    #AAB Education    - Learn something.
            #f_mod_apps_environment  #AAB Environment  - Command Line shell and GUI, DOS and Nintendo emulators.
            #f_mod_apps_filedir      #AAB File/Dir     - Manage, backup, compare, edit, encrypt, find, files/dirs.
            #f_mod_apps_games        #AAB Games        - Fun time! Games, movies, and screen-savers.
            #f_mod_apps_graphics     #AAB Graphics     - View images and graphics files.
            #f_mod_apps_internet     #AAB Internet     - Web, e-mail, chat, IM, RSS, ftp, torrents, etc.
            #f_mod_apps_network      #AAB Network      - Wireless connection, network monitoring, tools.
            #f_mod_apps_office       #AAB Office       - Editors, spreadsheets, presenter, organize, calcs, acctg.
            #f_mod_apps_packages     #AAB Packages     - (Un)Install and manage software packages (applications).
            #f_mod_apps_screens      #AAB Screens      - Multiple screen sessions and terminal emulators.
            #f_mod_apps_screen_tools #AAB Screen-Tools - Screen capture, record/play-back of screen activity etc.
            #f_mod_apps_system       #AAB System       - Monitor system processes, resources, utilities, etc.
            #
            THIS_FILE="lib_cli-menu-cat.lib"
            DELIMITER="#AAB" #AAB This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read AAB
            #
            if [ "$MENU_TITLE" = "Software Module Manager Menu" ] ; then
               case $AAB in
                    [Aa][Ll][Ll])
                    AAB="ALL"
                    f_update_all_modules
                    f_press_enter_key_to_continue
                    ;;
               esac
            fi
            #
            f_menu_item_process $AAB
      done  # End of Application Modules until loop.
            #
      unset AAB MENU_ITEM  # Throw out this variable.
} # End of function f_menu_module_display_txt
#
#
# Note: Cannot use $DELIMITER in if-statement because $MAX is calculated by
#       using grep to count the occurrences of $DELIMITER. So must use
#       $MENU_TITLE instead.
#
# Note: Function "f_download_file" calls "f_wget_file" which backs up the
#       software module (file) before downloading a new copy from the
#       GitHub repository branch.
#
# Example: If the displayed menu is the "Applications Categories Menu" then
#          the function "f_mod_apps_audio_video" (below) actually runs another
#          function, "f_menu_cat_audio_video" which is found in the file:
#          "mod_apps_audio-video.lib".
#
# +----------------------------------------+
# |    Function f_menu_module_display_gui  |
# +----------------------------------------+
#
#  Inputs: $1=$GUI
#    Uses: AAB, MENU_TITLE, THIS_FILE.
# Outputs: None.
#
f_menu_module_display_gui () {
      until [ "$AAB" = "0" ]
      do    # Start of Applications until loop.
            THIS_FILE="lib_cli-menu-cat.lib"
            AAB=$($1 --title "$MENU_TITLE" --menu "\n\nUse (up/down arrow keys) or (letters):" 20 80 11 \
            "Return"       "Return to previous menu." \
            "Audio-Video"  "Music/Video players, editors, utilities." \
            "Databases"    "General and specialized databases." \
            "Development"  "Tools to test code and track/report bugs." \
            "Education"    "Learn something." \
            "Environment"  "Command Line shell and GUI, DOS and Nintendo emulators." \
            "File/Dir"     "Manage, backup, compare, edit, encrypt, find, files/dirs." \
            "Games"        "Fun time! Games, movies, and screen-savers." \
            "Graphics"     "View images and graphics files." \
            "Internet"     "Web, e-mail, chat, IM, RSS, ftp, torrents, etc." \
            "Network"      "Wireless connection, network monitoring, tools." \
            "Office"       "Editors, spreadsheets, presenter, organize, calcs, acctg." \
            "Packages"     "(Un)Install and manage software packages (applications)." \
            "Screens"      "Multiple screen sessions and terminal emulators." \
            "Screen-Tools" "Screen capture, record/play-back of screen activity etc." \
            "System"        "Monitor system processes, resources, utilities, etc." \
            2>&1 >/dev/tty)
            #
            case $AAB in
                 "Return") AAB=0 ;;
                 "Audio-Video") f_mod_apps_audio_video ;;
                 "Databases") f_mod_apps_databases ;;
                 "Development") f_mod_apps_development ;;
                 "Education") f_mod_apps_education ;;
                 "Environment") f_mod_apps_environment ;;
                 "File/Dir") f_mod_apps_filedir ;;
                 "Games") f_mod_apps_games  ;;
                 "Graphics") f_mod_apps_graphics ;;
                 "Internet") f_mod_apps_internet ;;
                 "Network") f_mod_apps_network ;;
                 "Office") f_mod_apps_office ;;
                 "Packages") f_mod_apps_packages ;;
                 "Screens") f_mod_apps_screens ;;
                 "Screen-Tools") f_mod_apps_screen_tools ;;
                 "System") f_mod_apps_system ;;
            esac
      done  # End of Application Modules until loop.
            #
      unset AAB   # Throw out this variable.
} # End of function f_menu_module_display_gui
#
f_mod_apps_audio_video () {
      MOD_FILE="mod_apps-audio-video.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Audio-Video Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_audio_video
      else
         # Software Module Manager Menu, Audio-Video module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_databases () {
      MOD_FILE="mod_apps-databases.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Database Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_databases
      else
         # Software Module Manager Menu, Database module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_development () {
      MOD_FILE="mod_apps-development.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Development Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_development
      else
         # Software Module Manager Menu, Development module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_education () {
      MOD_FILE="mod_apps-education.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Education Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_education
      else
         # Software Module Manager Menu, Education module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_environment () {
      MOD_FILE="mod_apps-environment.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Environment Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_environment
      else
         # Software Module Manager Menu, Environmental module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_filedir () {
      MOD_FILE="mod_apps-filedir.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # File Management Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_file_management
      else
         # Software Module Manager Menu, File Management module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_games () {
      MOD_FILE="mod_apps-games.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Games Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_games
      else
         # Software Module Manager Menu, Games module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_graphics () {
      MOD_FILE="mod_apps-graphics.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Image-Graphics Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_image
      else
         # Software Module Manager Menu, Image-Graphics module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_internet () {
      MOD_FILE="mod_apps-internet.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Internet Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_internet
      else
         # Software Module Manager Menu, Internet module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_network () {
      MOD_FILE="mod_apps-network.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Network Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_network
      else
         # Software Module Manager Menu, Network module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_office () {
      MOD_FILE="mod_apps-office.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Office Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_office
      else
         # Software Module Manager Menu, Office module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_packages () {
      MOD_FILE="mod_apps-packages.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Package Management Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_packages
      else
         # Software Module Manager Menu, Package Management module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_screens () {
      MOD_FILE="mod_apps-screens.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Screen Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_screens
      else
         # Software Module Manager Menu, Screens module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
f_mod_apps_screen_tools () {
      MOD_FILE="mod_apps-screen-tools.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # Screen-Tools Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_app_screen_tools
      else
         # Software Module Manager Menu, Screen-Tools module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
f_mod_apps_system () {
      MOD_FILE="mod_apps-system.lib"
      if [ "$MENU_TITLE" = "Application Categories Menu" ] ; then
         # System Applications Menu.
         f_mod_apps_submenu $THIS_DIR $MOD_FILE f_menu_cat_system
      else
         # Software Module Manager Menu, System module selected.
         f_mod_manager $THIS_DIR $MOD_FILE
      fi
      #
}
#
# +----------------------------------------+
# |       Function f_mod_apps_submenu      |
# +----------------------------------------+
#
#  Inputs: $1=directory, $2=file, $3=function (sub-menu)
#    Uses: MENU_TITLE, ERROR.
# Outputs: None.
#
# When the user selects an application category or (application) module, this
# function will either display the sub-menu of applications or download the
# missing application module (file) automatically so that the sub-menu can be
# displayed. The behavior assumes that if the module is missing, yet the user
# wants to display a menu of applications within that module, then the module
# should be made available to the user by downloading it.
#
# If the module file exists, then the sub-menu of applications is displayed
# as per $3 (the function within the module file which displays the sub-menu).
#
# If the module file is missing, the missing module is automatically downloaded
# while the user is still in the "Application Categories Menu".
#
f_mod_apps_submenu () {
      # If library module file exists, then run function $3.
      if [ -r $1/$2 ] ; then
         # $2 exists so make it accessible.
         . $1/$2 # Invoke module library.
         $3
         # Restore MENU_TITLE since it determines which menu and menu item
         # options to use.
         # MENU_TITLE is either "Application Categories Menu"
         # or "Software Module Manager Menu".
         MENU_TITLE="Application Categories Menu"
      else
         # Check if there is an Internet connection before doing a download.
         f_test_internet_connection
         #
         if [ $ERROR -eq 0 ] ; then
            # Function f_download_file can use sudo permissions if needed.
            f_download_file
         else
            # Allow viewing of error message no Internet connection.
            f_press_enter_key_to_continue
         fi
         #
         if [ -r $1/$2 ] ; then
            $3
            # Restore MENU_TITLE since it determines which menu and menu item
            # options to use.
            # MENU_TITLE is either "Application Categories Menu"
            # or "Software Module Manager Menu".
            MENU_TITLE="Application Categories Menu"
         fi
      fi
} # End of function f_mod_apps_submenu.
#
# +----------------------------------------+
# |         Function f_mod_manager         |
# +----------------------------------------+
#
#  Inputs: $1=Directory, $2=File.
#    Uses: ANS
# Outputs: None.
#
# Display the appropriate prompt and take the selected action when in the
# "Software Module Manager Menu".
#
f_mod_manager () {
      # Does $2 exist?
      if [ -r $1/$2 ] ; then
         if [ -r $1/$2.tar.gz ] ; then
            # Both $2 and $2.tar.gz exist.
            echo -n "(R)emove/(Res)tore/(U)pdate/(Q)UIT module: $2? "
            read ANS
            case $ANS in
                 [Rr] | [Rr][Ee] | [Rr][Ee][Mm]*)
                 # Archive and remove (deactivate) from menu then delete $2.
                 f_mod_remove $1 $2
                 ;;
                 [Rr] | [Rr][Ee] | [Rr][Ee][Ss]*)
                 # Restore and invoke module then delete $2.tar.gz.
                 f_mod_restore $1 $2
                 ;;
                 [Uu] | [Uu][Pp]*)
                 # Update and invoke an existing module.
                 f_mod_update $1 $2
                 ;;
                 [Qq] | [Qq][Uu]*)
                 # Quit, do nothing.
                 ;;
            esac
         else
            # Only $2 exists.
            echo -n "(R)emove/(U)pdate/(Q)UIT module: $2? "
            read ANS
            case $ANS in
                 [Rr] | [Rr][Ee] | [Rr][Ee][Mm]*)
                 # Archive and remove (deactivate) from menu then delete $2.
                 f_mod_remove $1 $2
                 ;;
                 [Uu] | [Uu][Pp]*)
                 # Update and invoke an existing module.
                 f_mod_update $1 $2
                 ;;
                 [Qq] | [Qq][Uu]*)
                 # Quit, do nothing.
                 ;;
            esac
         fi
      else
         if [ -r $1/$2.tar.gz ] ; then
            # Only $2.tar.gz exists
            echo -n "(A)dd/(Res)tore/(Q)UIT module: $2? "
            read ANS
            case $ANS in
                 [Aa] | [Aa][Dd] | [Aa][Dd][Dd])
                 # Add and invoke a new module.
                 f_mod_add $1 $2
                 ;;
                 [Rr] | [Rr][Ee] | [Rr][Ee][Ss]*)
                 # Restore and invoke module then delete $2.tar.gz.
                 f_mod_restore $1 $2
                 ;;
                 [Qq] | [Qq][Uu]*)
                 # Quit, do nothing.
                 ;;
            esac
         else
            # Both $2 and $2.tar.gz do not exist.
            echo -n "(A)dd/(Q)UIT module: $2? "
            read ANS
            case $ANS in
                 [Aa] | [Aa][Dd] | [Aa][Dd][Dd])
                 # Add and invoke a new module.
                 f_mod_add $1 $2
                 ;;
                 [Qq] | [Qq][Uu]*)
                 # Quit, do nothing.
                 ;;
            esac
         fi
      fi
      #
} # End of function f_mod_manager
#
# +----------------------------------------+
# |           Function f_mod_add           |
# +----------------------------------------+
#
#  Inputs: $1=Directory, $2=File.
#    Uses: MOD_FILE, ANS
# Outputs: 
#
f_mod_add () {
      # Add and invoke a new module.
      if [ -e $1/$2 ] ; then
         echo $(tput bold)
         echo "Cannot add module since it already exists. Try updating it instead."
         echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
         f_press_enter_key_to_continue
      else
         # Check if there is an Internet connection before doing a download.
         f_test_internet_connection
         #
         if [ $ERROR -eq 0 ] ; then
            # Function f_download_file can use sudo permissions if needed.
            f_download_file
         else
            # Allow viewing of error message no Internet connection.
            f_press_enter_key_to_continue
         fi
         #
      fi
      #
      # If file exists and back-up file exists, then remove back-up file.
      if [ -e $1/$2 ] && [ -e $1/$2.tar.gz ] ; then
         # Delete any $2.tar.gz since it is no longer needed. 
         f_module_remove $1 $2.tar.gz
      fi
      #
      # Commented out, error message may be confusing to user when trying to
      # "Add a module".
      # if [ $ERROR -ne 0 ] ; then
      #    # Use different color font for error messages.
      #    f_term_color $ECOLOR $BCOLOR
      #    echo $(tput bold)
      #    if [ -e $1/$2.tar.gz ] ; then 
      #       echo "Error deleting back-up file of module file, \"$2\"."
      #    fi
      #    echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
      #    echo
      #    f_press_enter_key_to_continue
      # fi
} # End of function f_mod_add
#
# +----------------------------------------+
# |          Function f_mod_remove         |
# +----------------------------------------+
#
#  Inputs: $1=Directory, $2=File.
#    Uses: MOD_FILE, ANS
# Outputs: 
#
f_mod_remove () {
           # Archive and remove (deactivate) from menu then delete $2.
           # Does $2 exist? Permission to back-up file?
           f_module_archive $1 $2
           #
           if [ $ERROR -ne 0 ] ; then
              f_term_color $ECOLOR $BCOLOR
              echo $(tput bold)
              if [ -e $1/$2 ] ; then
                 echo "Error making back-up file of module \"$2\" before removing it."
              else
                 echo "Error making back-up file of module \"$2\" since it is not installed."
              fi
              echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
              echo
              f_press_enter_key_to_continue
           fi
           #
           # Delete file after making back-up copy.
           # Was file back-up successful and have permission to delete the original file?
           if [ -e $1/$2 ] && [ -e $1/$2.tar.gz ] ; then
           # If file exists and back-up file exists, then delete back-up file.
              f_module_remove $1 $2
           fi
           #
           if [ $ERROR -ne 0 ] ; then
              # Use different color font for error messages.
              f_term_color $ECOLOR $BCOLOR
              echo $(tput bold)
              if [ -e $1/$2 ] ; then
                 echo "Error removing older module file, \"$2\"."
              else
                 echo "Cannot remove module since it is not installed."
              fi
              echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
              echo
              f_press_enter_key_to_continue
           fi
} # End of function f_mod_remove
#
# +----------------------------------------+
# |          Function f_mod_restore        |
# +----------------------------------------+
#
#  Inputs: $1=Directory, $2=File.
#    Uses: MOD_FILE, ANS
# Outputs: 
#
f_mod_restore () {
           # Restore and invoke module then delete $2.tar.gz.
           # Does $2.tar.gz exist?
           f_module_restore $1 $2
           #
           if [ $ERROR -ne 0 ] ; then
              # Use different color font for error messages.
              f_term_color $ECOLOR $BCOLOR
              echo $(tput bold)
              if [ -e $1/$2.tar.gz ] ; then
                 echo "Error restoring module from back-up file \"$2.tar.gz\"."
              else
                 echo "Cannot restore module. Try adding it instead."
              fi
              echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
              echo
              f_press_enter_key_to_continue
           fi
           #
           #  Invoke module library if it was successfully restored.
           if [ -r $1/$2 ] ; then
              # $2 exists in current directory so make it accessible.
              . $1/$2 # Invoke module library.
           fi
           #
           # If file exists and back-up file exists, then remove back-up file.
           if [ -e $1/$2 ] && [ -e $1/$2.tar.gz ] ; then
              # Delete any $2.tar.gz since it is no longer needed. 
              f_module_remove $1 $2.tar.gz
              ERROR=$?
              if [ $ERROR -ne 0 ] ; then
                 echo "Error deleting old back-up file, \"$2.tar.gz\"."
              fi
           fi
           #
           # Commented out, error message may be confusing to user when trying
           # to "Restore a module".
           # if [ $ERROR -ne 0 ] ; then
           #    # Use different color font for error messages.
           #    f_term_color $ECOLOR $BCOLOR
           #    echo $(tput bold)
           #    if [ -e $1/$2.tar.gz ] ; then
           #       echo "Error deleting back-up file of module file, \"$2\"."
           #    fi
           #    echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
           #    echo
           #    f_press_enter_key_to_continue
           # fi
} # End of function f_mod_restore
#
# +----------------------------------------+
# |          Function f_mod_update         |
# +----------------------------------------+
#
#  Inputs: $1=Directory, $2=File.
#    Uses: MOD_FILE, ANS
# Outputs: 
#
f_mod_update () {
           # Update and invoke an existing module.
           if [ -e $1/$2 ] ; then 
              # <module file name> <Followed by whitespace>
              # Check if there is an Internet connection before
              # doing a download.
              f_test_internet_connection
              #
              if [ $ERROR -eq 0 ] ; then
                 # Function f_download_file can use sudo permissions if needed.
                 f_download_file
              else
                 # Allow viewing of error message no Internet connection.
                 f_press_enter_key_to_continue
              fi
              #
           else
              if [ -r $1/$2.tar.gz ] ; then
                 # Only $2.tar.gz exists
                 # Use different color font for error messages.
                 f_term_color $ECOLOR $BCOLOR
                 echo $(tput bold)
                 echo "Cannot update module since it is de-activated."
                 echo "Try restoring it instead."
                 echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
                 f_press_enter_key_to_continue
              else
                 # Neither $2 nor $2.tar.gz exist.
                 echo "Cannot update module since it is de-activated."
                 echo "Try adding it instead."
                 echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
                 f_press_enter_key_to_continue
              fi
           fi
} # End of function f_mod_update
#
# +----------------------------------------+
# |        Function f_module_archive       |
# +----------------------------------------+
#
#  Inputs: $1=Directory $2=File.
#    Uses: None.
# Outputs: ERROR. 
#          ERROR=0 Back-up successful.
#          ERROR=1 Back-up failed.
#          ERROR=2 File does not exist so not backed up.

#
f_module_archive () {
      if [ -w $1/$2 ] ; then
         # Yes, so archive and remove (deactivate) from menu.
         cd $1 # Change directory so tar will archive file into $1.
         tar -zcvf $2.tar.gz $2 1>/dev/null
         # 1=standard messages, 2=error messages, &=both.
         ERROR=$?
      else
         # File either does not exist or you need sudo permission.
         # Does file exist?
         if [ -e $1/$2 ] ; then
            # Need sudo permissions to backup file.
            cd $1 # Change directory so tar will archive file into THIS_DIR.
            sudo tar -zcvf $2.tar.gz $2 1>/dev/null
            # 1=standard messages, 2=error messages, &=both.
            ERROR=$?
         else
            # File does not exist.
            ERROR=2
         fi
      fi
} # End of function f_module_archive
#
# +----------------------------------------+
# |        Function f_module_remove        |
# +----------------------------------------+
#
#  Inputs: $1=Directory $2=File.
#    Uses: None.
# Outputs: ERROR.
#
f_module_remove () {
      if [ -w $1/$2 ] ; then
         # File exists and can be deleted.
         rm $1/$2
         ERROR=$?
      else
         # File either does not exist or cannot be deleted without sudo.
         # Does file exist?
         if [ -e $1/$2 ] ; then
            # Need sudo permissions to delete file.
            sudo rm $1/$2 # Delete old file.
            ERROR=$?
         else
            # File does not exist.
            ERROR=2 # Display error message if trying to delete a missing file.
         fi
      fi
} # End of function f_module_remove
#
#
# +----------------------------------------+
# |        Function f_module_restore       |
# +----------------------------------------+
#
#  Inputs: $1=Directory $2=File (without suffix .tar.gz). 
#    Uses: None.
# Outputs: Error.
#
f_module_restore () {
      if [ -w $1/$2.tar.gz ] ; then
         # Yes, then restore (activate) to menu.
         cd $1 # Change directory so tar will restore file into $1.
         tar -xzvf $1/$2.tar.gz 1>/dev/null
         # 1=standard messages, 2=error messages, &=both.
         ERROR=$?
      else
         # File $2.tar.gz either does not exist or is not writable without sudo.
         #
         # Does $2.tar.gz file exist?
         if [ -e $1/$2.tar.gz ] ; then
            # Yes, $2.tar.gz file exists.
            # Need sudo permissions to backup file.
            cd $1 # Change directory so tar will restore file into $1.
            sudo tar -xzvf $1/$2.tar.gz 1>/dev/null
            # 1=standard messages, 2=error messages, &=both.
            ERROR=$?
         else
            # No, $2.tar.gz file does not exist.
            ERROR=2
         fi
      fi
} # End of function f_module_restore
#
# +----------------------------------------+
# |     Function f_update_all_modules      |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: XSTR, YSTR, DELIMITER, MOD_FILE, MOD_FUNC, THIS_DIR, THIS_FILE.
# Outputs: ERROR.
#
# Automatically update all previously installed, existing modules.
#
f_update_all_modules () {
      XXSTR=$DELIMITER  # Save $DELIMITER. 
      YSTR=$THIS_FILE   # Save $THIS_FILE.
      f_initvars_menu_app "AAB"
      DELIMITER="#AAB"  #AAB This 3rd field prevents awk from printing this line into menu options. 
      THIS_FILE="lib_cli-menu-cat.lib"
      MOD_FILE=""  # Null so an older file name is not displayed by function,
                   # f_test_internet_connection if the test fails.
      #
      # Check if there is an Internet connection before doing a download.
      f_test_internet_connection
      #
      if [ $ERROR -ne 0 ] ; then
         # Allow viewing of error message no Internet connection.
         f_press_enter_key_to_continue
         #
      else
         f_ask_which_branch_download
         #
         if [ "$BRANCH" != "SKIP" ] ; then
            #
            # Extract the name of the module, mod_apps-*.lib file from the
            # Applications Category Menu.
            #
            # for-loop awk command uses back-ticks to execute,
            # resulting in name of mod_apps-*.lib.
            for MOD_FUNC in `awk -F $DELIMITER '{if ($2&&!$3){print $1}}' $THIS_DIR/$THIS_FILE | awk -F "#f_" '{print $2}'`
            do
                # Convert the function name, $MOD_FILE in the "Application Category Menu"
                # to a file name, $MOD_FILE.
                #
                # The conversion is necessary because the file names may contain
                # <dash> characters while function names cannot under non-bash shells.
                #
                # MOD_FUNC is the <function name>.
                # MOD_FILE is the <file name> converted from the <function name>.
                #
                MOD_FILE=$MOD_FUNC
                MOD_FILE=${MOD_FILE/mod_apps_/mod_apps-}      # Substitute <underscore> for <dash>.
                MOD_FILE=${MOD_FILE/audio_video/audio-video}  # Substitution for audio-video.
                MOD_FILE=$MOD_FILE.lib                        # Complete the <file name> change.
                #
                # Update only previously installed/downloaded modules.
                if [ -r $THIS_DIR/$MOD_FILE ] ; then
                   # <module file name> <Followed by whitespace>
                   # Module exists so update to latest version.
                   echo "_____________________________________________________________________"
                   echo
                   echo "Update \"$MOD_FILE\" from the GitHub software repository?"
                   #
                   # Ask download from which branch and wget.
                   f_wget_file_2
                fi
                #
                # Check to see if download was successful
                # before invoking module.
                if [ -r $THIS_DIR/$MOD_FILE ] ; then
                   # $MOD_FILE exists in current directory
                   # so make it accessible.
                   . $THIS_DIR/$MOD_FILE # Invoke module library.
                fi
            done
         fi
      fi   
      DELIMITER=$XXSTR
      THIS_FILE=$YSTR
      unset XSTR YSTR MOD_FUNC MOD_FILE
} # End of function f_update_all_modules
#
# +----------------------------------------+
# |      Function f_menu_app_favorites     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MENU_ITEM, MAX, SAVE_DIR, THIS_DIR.
# Outputs: ERROR, MENU_TITLE, DELIMITER, MENU_ITEM.
#
f_menu_app_favorites () {
      if [ -r ~/cli-app-menu-favorites.txt ] ; then
         SAVE_DIR=$THIS_DIR
         export SAVE_DIR
         f_initvars_menu_app "MZZ"
         until [ "$MZZ" = "0" ]
         do    # Start of Favorite Applications until loop.
               THIS_DIR=~
               THIS_FILE="cli-app-menu-favorites.txt"
               MENU_TITLE="Favorite Applications Menu"
               DELIMITER="#MZZ" #MZZ This 3rd field prevents awk from printing this line into menu options. 
               #
               f_show_menu "$MENU_TITLE" "$DELIMITER" 
               read MZZ
               f_menu_item_process $MZZ  # Outputs $MENU_ITEM.
         done  # End of Favorite Applications until loop.
         THIS_DIR=$SAVE_DIR
      else
         clear  # blank screen
         # Use different color font for error messages.
         f_term_color $ECOLOR $BCOLOR
         echo $(tput bold)
         #
         echo ">>>The file \"cli-app-menu-favorites.txt\" is either missing or cannot be read.<<<"
         echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
         echo
         echo "The file \"cli-app-menu-favorites.txt\" can be created/updated by going into an"
         echo "application menu and entering the item number followed by \"f\" of your favorite"
         echo "application."
         echo
         echo "For example, suppose you are in the Arcade Games Menu:"
         echo
         echo "--- Arcade Games Menu ---"
         echo
         echo "0 - Return to previous menu."
         echo "1 - ascii-invaders - Space Invader clone."
         echo "2 - asciijump      - Ski jump game."
         echo "..."
         echo "8 - ninvaders      - Space invaders-like game ncurses-based."
         echo
         echo "Enter 0 to 15 or letters: 8f"
         echo
         echo "The response, \"8f\" indicates that you want to add \"ninvaders\""
         echo "to your favorites menu."
         echo
         echo "The file \"cli-app-menu-favorites.txt\" can also be edited to delete menu entries."
         f_press_enter_key_to_continue
      fi
           #
      unset MZZ MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_favorites
#
# +----------------------------------------+
# |       Function f_install_ncurses       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null), ERROR.
#
# This function installs ncurses which is needed by text applications
# to draw lines, box corners, and other "graphical" screen effects.
#
# This function is in file lib_cli-menu-cat.lib instead of lib_cli-common.lib
# because the latter file is growing too big.
#
f_install_ncurses () {
      clear  # blank screen
      echo "This script will automatically install \"libncurses-dev\"."
      echo
      # Install libncurses-dev as a prerequisite.
      APP_NAME="libncurses-dev"
      f_application_install
      #
      if [ $ERROR -ne 0 ] ; then
         # Failure to install libncurses-dev.
         # Use different color font for error messages.
         f_term_color $ECOLOR $BCOLOR
         echo $(tput bold)
         echo "Installation of \"libncurses-dev\" failed."
         echo " Skipping installation of \"ncurses-dev\"."
         echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
         echo -n "Press '"Enter"' key to continue."
         read X
         unset X  # Throw out this variable.
      else
         # Success at installing libncurses-dev.
         echo
         echo "Installation of \"libncurses-dev\" is successful."
         echo
         echo -n "Press '"Enter"' key to continue."
         read X
         unset X  # Throw out this variable.
         #
         # Install ncurses-dev as a prerequisite.
         APP_NAME="ncurses-dev"
         f_application_install
         #
         if [ $ERROR -ne 0 ] ; then
            # Failure to install ncurses-dev.
            # Use different color font for error messages.
            f_term_color $ECOLOR $BCOLOR
            echo $(tput bold)
            echo "Installation of \"ncurses-dev\" failed."
            echo -n $(tput sgr0) ; f_term_color $FCOLOR $BCOLOR ; echo -n $(tput bold)
            echo -n "Press '"Enter"' key to continue."
            read X
            unset X  # Throw out this variable.
         else
            # Success at installing ncurses-dev.
            echo
            echo "Installation of \"ncurses-dev\" is successful."
            echo
            echo -n "Press '"Enter"' key to continue."
            read X
            unset X  # Throw out this variable.
           fi
      fi
         # Set to null so that f_application_run doesn't try to run
         # libncurses-dev or ncurses-dev as stand-alone applications.
         MENU_ITEM_NAME="" # Null so f_application_run does not try to run.
                           # when it's not installed.
         APP_NAME=""       # Also prevents checking for Quit Clause.
      unset ANS
} # End of function f_install_ncurses
#
